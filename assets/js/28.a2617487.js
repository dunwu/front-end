(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{416:function(a,t,v){"use strict";v.r(t);var s=v(15),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"javascript-变量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#javascript-变量"}},[a._v("#")]),a._v(" JavaScript 变量")]),a._v(" "),v("p",[a._v("在编程语言中，变量用于存储数据值。")]),a._v(" "),v("p",[a._v("JavaScript 使用关键字 "),v("strong",[a._v("var")]),a._v(" 来定义变量， 使用等号来为变量赋值：")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("var x, length\nx = 5\nlength = 6\n")])])]),v("p",[a._v("变量可以通过变量名访问。在指令式语言中，变量通常是可变的。字面量是一个恒定的值。")]),a._v(" "),v("h2",{attrs:{id:"变量命名规则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#变量命名规则"}},[a._v("#")]),a._v(" 变量命名规则")]),a._v(" "),v("p",[a._v("变量在 JavaScript 中就是用一个变量名表示，变量名是大小写英文、数字、"),v("code",[a._v("$")]),a._v(" 和 "),v("code",[a._v("_")]),a._v(" 的组合，且不能用数字开头。变量名也不能是 JavaScript 的关键字，如 "),v("code",[a._v("if")]),a._v("、"),v("code",[a._v("while")]),a._v(" 等。申明一个变量用 "),v("code",[a._v("var")]),a._v(" 语句，比如：")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("var a; // 申明了变量a，此时a的值为undefined\nvar $b = 1; // 申明了变量$b，同时给$b赋值，此时$b的值为1\nvar s_007 = '007'; // s_007是一个字符串\nvar Answer = true; // Answer是一个布尔值true\nvar t = null; // t的值是null\n")])])]),v("p",[a._v("变量名也可以用中文，但是，请不要给自己找麻烦。")]),a._v(" "),v("blockquote",[v("p",[a._v("注：JavaScript 中，常见的是驼峰法的命名规则，如 lastName (而不是lastname)。")])]),a._v(" "),v("h2",{attrs:{id:"javascript-是动态语言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#javascript-是动态语言"}},[a._v("#")]),a._v(" JavaScript 是动态语言")]),a._v(" "),v("p",[a._v("在JavaScript中，使用等号 "),v("code",[a._v("=")]),a._v(" 对变量进行赋值。可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，但是要注意只能用 "),v("code",[a._v("var")]),a._v(" 申明一次，例如：")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("var a = 123; // a的值是整数123\na = 'ABC'; // a变为字符串\n")])])]),v("p",[a._v("这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如 Java 是静态语言，赋值语句如下：")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v('int a = 123; // a是整数类型变量，类型用int申明\na = "ABC"; // 错误：不能把字符串赋给整型变量\n\n')])])]),v("p",[a._v("和静态语言相比，动态语言更灵活，就是这个原因。")]),a._v(" "),v("p",[a._v("请不要把赋值语句的等号等同于数学的等号。比如下面的代码：")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("var x = 10;\nx = x + 2;\n\n")])])]),v("p",[a._v("如果从数学上理解 "),v("code",[a._v("x = x + 2")]),a._v(" 那无论如何是不成立的，在程序中，赋值语句先计算右侧的表达式 "),v("code",[a._v("x + 2")]),a._v("，得到结果"),v("code",[a._v("12")]),a._v("，再赋给变量 "),v("code",[a._v("x")]),a._v("。由于 "),v("code",[a._v("x")]),a._v(" 之前的值是 "),v("code",[a._v("10")]),a._v("，重新赋值后，"),v("code",[a._v("x")]),a._v(" 的值变成 "),v("code",[a._v("12")]),a._v("。")]),a._v(" "),v("h2",{attrs:{id:"局部变量和全局变量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#局部变量和全局变量"}},[a._v("#")]),a._v(" 局部变量和全局变量")]),a._v(" "),v("h3",{attrs:{id:"局部变量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#局部变量"}},[a._v("#")]),a._v(" 局部变量")]),a._v(" "),v("p",[a._v("在 JavaScript 函数内部声明的变量（使用 var）是"),v("em",[a._v("局部")]),a._v("变量，所以只能在函数内部访问它。（该变量的作用域是局部的）。")]),a._v(" "),v("p",[a._v("您可以在不同的函数中使用名称相同的局部变量，因为只有声明过该变量的函数才能识别出该变量。")]),a._v(" "),v("p",[a._v("只要函数运行完毕，本地变量就会被删除。")]),a._v(" "),v("h3",{attrs:{id:"全局变量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#全局变量"}},[a._v("#")]),a._v(" 全局变量")]),a._v(" "),v("p",[a._v("在函数外声明的变量是全局变量，网页上的所有脚本和函数都能访问它。")]),a._v(" "),v("h3",{attrs:{id:"局部变量和全局变量的生命周期"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#局部变量和全局变量的生命周期"}},[a._v("#")]),a._v(" 局部变量和全局变量的生命周期")]),a._v(" "),v("p",[a._v("JavaScript 变量的生命期从它们被声明的时间开始。")]),a._v(" "),v("p",[a._v("局部变量会在函数运行以后被删除。")]),a._v(" "),v("p",[a._v("全局变量会在页面关闭后被删除。")]),a._v(" "),v("h3",{attrs:{id:"向未声明的变量分配值"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#向未声明的变量分配值"}},[a._v("#")]),a._v(" 向未声明的变量分配值")]),a._v(" "),v("p",[a._v("如果您把值赋给尚未声明的变量，该变量将被自动作为全局变量声明。")]),a._v(" "),v("p",[a._v("这条语句：")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v('carname="Volvo";\n')])])]),v("p",[a._v("将声明一个全局变量 carname，即使它在函数内执行。")]),a._v(" "),v("h2",{attrs:{id:"strict模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#strict模式"}},[a._v("#")]),a._v(" strict模式")]),a._v(" "),v("p",[a._v("JavaScript 在设计之初，为了方便初学者学习，并不强制要求用 "),v("code",[a._v("var")]),a._v(" 申明变量。这个设计错误带来了严重的后果：如果一个变量没有通过 "),v("code",[a._v("var")]),a._v(" 申明就被使用，那么该变量就自动被申明为全局变量：")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("i = 10; // i现在是全局变量\n\n")])])]),v("p",[a._v("在同一个页面的不同的 JavaScript 文件中，如果都不用 "),v("code",[a._v("var")]),a._v(" 申明，恰好都使用了变量 "),v("code",[a._v("i")]),a._v("，将造成变量 "),v("code",[a._v("i")]),a._v(" 互相影响，产生难以调试的错误结果。")]),a._v(" "),v("p",[a._v("使用 "),v("code",[a._v("var")]),a._v(" 申明的变量则不是全局变量，它的范围被限制在该变量被申明的函数体内（函数的概念将稍后讲解），同名变量在不同的函数体内互不冲突。")]),a._v(" "),v("p",[a._v("为了修补 JavaScript 这一严重设计缺陷，ECMA 在后续规范中推出了 strict 模式，在 strict 模式下运行的 JavaScript 代码，强制通过 "),v("code",[a._v("var")]),a._v(" 申明变量，未使用 "),v("code",[a._v("var")]),a._v(" 申明变量就使用的，将导致运行错误。")]),a._v(" "),v("p",[a._v("启用 strict 模式的方法是在 JavaScript 代码的第一行写上：")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("'use strict';\n")])])]),v("p",[a._v("这是一个字符串，不支持 strict 模式的浏览器会把它当做一个字符串语句执行，支持 strict 模式的浏览器将开启 strict 模式运行 JavaScript。")]),a._v(" "),v("p",[a._v("来测试一下你的浏览器是否能支持 strict 模式：")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("abc = 'Hello, world';\nalert(abc);\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);