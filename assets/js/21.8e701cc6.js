(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{409:function(a,t,n){"use strict";n.r(t);var v=n(15),s=Object(v.a)({},(function(){var a=this,t=a.$createElement,n=a._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"javascript-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript-函数"}},[a._v("#")]),a._v(" JavaScript 函数")]),a._v(" "),n("blockquote",[n("p",[n("strong",[a._v("函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。")])])]),a._v(" "),n("h2",{attrs:{id:"函数定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数定义"}},[a._v("#")]),a._v(" 函数定义")]),a._v(" "),n("p",[a._v("JavaScript 使用关键词 "),n("strong",[a._v("function")]),a._v(" 定义函数。")]),a._v(" "),n("p",[a._v("函数可以通过声明定义，也可以是一个表达式。")]),a._v(" "),n("h3",{attrs:{id:"函数声明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数声明"}},[a._v("#")]),a._v(" 函数声明")]),a._v(" "),n("p",[a._v("函数就是包裹在花括号中的代码块，前面使用了关键词 "),n("code",[a._v("function")]),a._v(" ，函数声明后不会立即执行，会在我们需要的时候调用到。")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function functionName(params) {\n  // 执行的代码\n}\n")])])]),n("blockquote",[n("p",[a._v("提示：")]),a._v(" "),n("p",[a._v("JavaScript 对大小写敏感。关键词 "),n("code",[a._v("function")]),a._v(" 必须是小写的，并且必须以与函数名称相同的大小写来调用函数。")]),a._v(" "),n("p",[a._v("分号是用来分隔可执行JavaScript语句。 由于函数声明不是一个可执行语句，所以不以分号结束。")])]),a._v(" "),n("h3",{attrs:{id:"函数表达式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数表达式"}},[a._v("#")]),a._v(" 函数表达式")]),a._v(" "),n("p",[a._v("JavaScript 函数可以通过一个表达式定义。")]),a._v(" "),n("p",[a._v("函数表达式可以存储在变量中：")]),a._v(" "),n("p",[a._v("实例")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var x = function (a, b) {return a * b};\n")])])]),n("p",[a._v("在函数表达式存储在变量后，变量也可作为一个函数使用：")]),a._v(" "),n("p",[a._v("实例")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var x = function (a, b) {return a * b};\nvar z = x(4, 3);\n")])])]),n("p",[a._v("以上函数实际上是一个 "),n("strong",[a._v("匿名函数")]),a._v(" (函数没有名称)。")]),a._v(" "),n("p",[a._v("函数存储在变量中，不需要函数名称，通常通过变量名来调用。")]),a._v(" "),n("blockquote",[n("p",[a._v("提示：上述函数以分号结尾，因为它是一个执行语句。")])]),a._v(" "),n("h3",{attrs:{id:"构造函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[a._v("#")]),a._v(" 构造函数")]),a._v(" "),n("p",[a._v("在以上实例中，我们了解到函数通过关键字 "),n("strong",[a._v("function")]),a._v(" 定义。")]),a._v(" "),n("p",[a._v("函数同样可以通过内置的 JavaScript 函数构造器（Function()）定义。")]),a._v(" "),n("p",[a._v("实例")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('var myFunction = new Function("a", "b", "return a * b");\nvar x = myFunction(4, 3);\n')])])]),n("p",[a._v("实际上，你不必使用构造函数。上面实例可以写成：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var myFunction = function (a, b) {return a * b}\nvar x = myFunction(4, 3);\n")])])]),n("blockquote",[n("p",[a._v("提示：在 JavaScript 中，很多时候，你需要避免使用 "),n("strong",[a._v("new")]),a._v(" 关键字。")])]),a._v(" "),n("h3",{attrs:{id:"带有返回值的函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#带有返回值的函数"}},[a._v("#")]),a._v(" 带有返回值的函数")]),a._v(" "),n("p",[a._v("有时，我们会希望函数将值返回调用它的地方。")]),a._v(" "),n("p",[a._v("通过使用 return 语句就可以实现。")]),a._v(" "),n("p",[a._v("在使用 return 语句时，函数会停止执行，并返回指定的值。")]),a._v(" "),n("p",[a._v("语法")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function myFunction()\n{\nvar x=5;\nreturn x;\n}\n")])])]),n("p",[a._v("上面的函数会返回值 5。")]),a._v(" "),n("p",[a._v("注释：整个 JavaScript 并不会停止执行，仅仅是函数。JavaScript 将继续执行代码，从调用函数的地方。")]),a._v(" "),n("p",[a._v("函数调用将被返回值取代：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var myVar=myFunction();\n")])])]),n("p",[a._v('myVar 变量的值是 5，也就是函数 "myFunction()" 所返回的值。')]),a._v(" "),n("p",[a._v("即使不把它保存为变量，您也可以使用返回值：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('document.getElementById("demo").innerHTML=myFunction();\n')])])]),n("p",[a._v('"demo" 元素的 innerHTML 将成为 5，也就是函数 "myFunction()" 所返回的值。')]),a._v(" "),n("p",[a._v("您可以使返回值基于传递到函数中的参数：")]),a._v(" "),n("p",[a._v("实例")]),a._v(" "),n("p",[a._v("计算两个数字的乘积，并返回结果：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('function myFunction(a,b)\n{\nreturn a*b;\n}\n\ndocument.getElementById("demo").innerHTML=myFunction(4,3);\n')])])]),n("p",[a._v('"demo" 元素的 innerHTML 将是：')]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("12\n")])])]),n("p",[a._v("在您仅仅希望退出函数时 ，也可使用 return 语句。返回值是可选的：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function myFunction(a,b)\n{\nif (a>b)\n  {\n  return;\n  }\nx=a+b\n}\n")])])]),n("p",[a._v("如果 a 大于 b，则上面的代码将退出函数，并不会计算 a 和 b 的总和。")]),a._v(" "),n("h2",{attrs:{id:"函数调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数调用"}},[a._v("#")]),a._v(" 函数调用")]),a._v(" "),n("p",[a._v("JavaScript 函数有 4 种调用方式。")]),a._v(" "),n("p",[a._v("每种方式的不同在于 "),n("strong",[a._v("this")]),a._v(" 的初始化。")]),a._v(" "),n("h3",{attrs:{id:"this-关键字"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#this-关键字"}},[a._v("#")]),a._v(" this 关键字")]),a._v(" "),n("p",[a._v("一般而言，在Javascript中，this指向函数执行时的当前对象。")]),a._v(" "),n("blockquote",[n("p",[a._v("注：注意 "),n("strong",[a._v("this")]),a._v(" 是保留关键字，你不能修改 "),n("strong",[a._v("this")]),a._v(" 的值。")])]),a._v(" "),n("h3",{attrs:{id:"作为一个函数调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#作为一个函数调用"}},[a._v("#")]),a._v(" 作为一个函数调用")]),a._v(" "),n("p",[a._v("实例")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function myFunction(a, b) {\n    return a * b;\n}\nmyFunction(10, 2);           // myFunction(10, 2) 返回 20\n")])])]),n("p",[a._v("以上函数不属于任何对象。但是在 JavaScript 中它始终是默认的全局对象。")]),a._v(" "),n("p",[a._v("在 HTML 中默认的全局对象是 HTML 页面本身，所以函数是属于 HTML 页面。")]),a._v(" "),n("p",[a._v("在浏览器中的页面对象是浏览器窗口(window 对象)。以上函数会自动变为 window 对象的函数。")]),a._v(" "),n("p",[a._v("myFunction() 和 window.myFunction() 是一样的：")]),a._v(" "),n("p",[a._v("实例")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function myFunction(a, b) {\n    return a * b;\n}\nwindow.myFunction(10, 2);    // window.myFunction(10, 2) 返回 20\n")])])]),n("blockquote",[n("p",[a._v("注：这是调用 JavaScript 函数常用的方法， 但不是良好的编程习惯。全局变量，方法或函数容易造成命名冲突的bug。")])]),a._v(" "),n("h3",{attrs:{id:"全局对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#全局对象"}},[a._v("#")]),a._v(" 全局对象")]),a._v(" "),n("p",[a._v("当函数没有被自身的对象调用时， "),n("strong",[a._v("this")]),a._v(" 的值就会变成全局对象。")]),a._v(" "),n("p",[a._v("在 web 浏览器中全局对象是浏览器窗口（window 对象）。")]),a._v(" "),n("p",[a._v("该实例返回 "),n("strong",[a._v("this")]),a._v(" 的值是 window 对象:")]),a._v(" "),n("p",[a._v("实例")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function myFunction() {\n    return this;\n}\nmyFunction();                // 返回 window 对象\n")])])]),n("blockquote",[n("p",[a._v("注：函数作为全局对象调用，会使 "),n("strong",[a._v("this")]),a._v(" 的值成为全局对象。使用 window 对象作为一个变量容易造成程序崩溃。")])]),a._v(" "),n("h3",{attrs:{id:"函数作为方法调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数作为方法调用"}},[a._v("#")]),a._v(" 函数作为方法调用")]),a._v(" "),n("p",[a._v("在 JavaScript 中你可以将函数定义为对象的方法。")]),a._v(" "),n("p",[a._v("以下实例创建了一个对象 ("),n("strong",[a._v("myObject")]),a._v("), 对象有两个属性 ("),n("strong",[a._v("firstName")]),a._v(" 和 "),n("strong",[a._v("lastName")]),a._v("), 及一个方法 ("),n("strong",[a._v("fullName")]),a._v("):")]),a._v(" "),n("p",[a._v("实例")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('var myObject = {\n    firstName:"John",\n    lastName: "Doe",\n    fullName: function () {\n        return this.firstName + " " + this.lastName;\n    }\n}\nmyObject.fullName();         // 返回 "John Doe"\n')])])]),n("p",[n("strong",[a._v("fullName")]),a._v(" 方法是一个函数。函数属于对象。 "),n("strong",[a._v("myObject")]),a._v(" 是函数的所有者。")]),a._v(" "),n("p",[n("strong",[a._v("this")]),a._v("对象，拥有 JavaScript 代码。实例中 "),n("strong",[a._v("this")]),a._v(" 的值为 "),n("strong",[a._v("myObject")]),a._v(" 对象。")]),a._v(" "),n("p",[a._v("测试一下！修改 "),n("strong",[a._v("fullName")]),a._v(" 方法并返回 "),n("strong",[a._v("this")]),a._v(" 值：")]),a._v(" "),n("p",[a._v("实例")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('var myObject = {\n    firstName:"John",\n    lastName: "Doe",\n    fullName: function () {\n        return this;\n    }\n}\nmyObject.fullName();          // 返回 [object Object] (所有者对象)\n')])])]),n("blockquote",[n("p",[a._v("注：函数作为对象方法调用，会使得 "),n("strong",[a._v("this")]),a._v(" 的值成为对象本身。")])]),a._v(" "),n("h3",{attrs:{id:"使用构造函数调用函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用构造函数调用函数"}},[a._v("#")]),a._v(" 使用构造函数调用函数")]),a._v(" "),n("p",[a._v("如果函数调用前使用了 "),n("strong",[a._v("new")]),a._v(" 关键字, 则是调用了构造函数。")]),a._v(" "),n("p",[a._v("这看起来就像创建了新的函数，但实际上 JavaScript 函数是重新创建的对象：")]),a._v(" "),n("p",[a._v("实例")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('// 构造函数:\nfunction myFunction(arg1, arg2) {\n    this.firstName = arg1;\n    this.lastName  = arg2;\n}\n\n// This creates a new object\nvar x = new myFunction("John","Doe");\nx.firstName;                             // 返回 "John"\n')])])]),n("p",[a._v("构造函数的调用会创建一个新的对象。新对象会继承构造函数的属性和方法。")]),a._v(" "),n("blockquote",[n("p",[a._v("注：构造函数中 "),n("strong",[a._v("this")]),a._v(" 关键字没有任何的值。"),n("strong",[a._v("this")]),a._v(" 的值在函数调用时实例化对象(new object)时创建。")])]),a._v(" "),n("h3",{attrs:{id:"作为函数方法调用函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#作为函数方法调用函数"}},[a._v("#")]),a._v(" 作为函数方法调用函数")]),a._v(" "),n("p",[a._v("在 JavaScript 中, 函数是对象。JavaScript 函数有它的属性和方法。")]),a._v(" "),n("p",[n("strong",[a._v("call()")]),a._v(" 和 "),n("strong",[a._v("apply()")]),a._v(" 是预定义的函数方法。 两个方法可用于调用函数，两个方法的第一个参数必须是对象本身。")]),a._v(" "),n("p",[a._v("实例")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function myFunction(a, b) {\n    return a * b;\n}\nmyFunction.call(myObject, 10, 2);      // 返回 20\n")])])]),n("p",[a._v("实例")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function myFunction(a, b) {\n    return a * b;\n}\nmyArray = [10,2];\nmyFunction.apply(myObject, myArray);   // 返回 20\n")])])]),n("p",[a._v("两个方法都使用了对象本身作为第一个参数。 两者的区别在于第二个参数： apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始）。")]),a._v(" "),n("p",[a._v("在 JavaScript 严格模式(strict mode)下, 在调用函数时第一个参数会成为 "),n("strong",[a._v("this")]),a._v(" 的值， 即使该参数不是一个对象。")]),a._v(" "),n("p",[a._v("在 JavaScript 非严格模式(non-strict mode)下, 如果第一个参数的值是 null 或 undefined, 它将使用全局对象替代。")]),a._v(" "),n("blockquote",[n("p",[a._v("注：通过 call() 或 apply() 方法你可以设置 "),n("strong",[a._v("this")]),a._v(" 的值, 且作为已存在对象的新方法调用。")])]),a._v(" "),n("h3",{attrs:{id:"自调用函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自调用函数"}},[a._v("#")]),a._v(" 自调用函数")]),a._v(" "),n("p",[a._v('函数表达式可以 "自调用"。')]),a._v(" "),n("p",[a._v("自调用表达式会自动调用。")]),a._v(" "),n("p",[a._v("如果表达式后面紧跟 () ，则会自动调用。")]),a._v(" "),n("p",[a._v("不能自调用声明的函数。")]),a._v(" "),n("p",[a._v("通过添加括号，来说明它是一个函数表达式：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('(function () {\n    var x = "Hello!!";      // 我将调用自己\n})();\n')])])]),n("p",[a._v("以上函数实际上是一个 "),n("strong",[a._v("匿名自我调用的函数")]),a._v(" (没有函数名)。")]),a._v(" "),n("h2",{attrs:{id:"函数参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数参数"}},[a._v("#")]),a._v(" 函数参数")]),a._v(" "),n("p",[a._v("在调用函数时，您可以向其传递值，这些值被称为参数。")]),a._v(" "),n("p",[a._v("这些参数可以在函数中使用。")]),a._v(" "),n("p",[a._v("您可以发送任意多的参数，由逗号 (,) 分隔：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("myFunction(argument1,argument2)\n")])])]),n("p",[a._v("当您声明函数时，请把参数作为变量来声明：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function myFunction(var1,var2)\n{\n这里是要执行的代码\n}\n")])])]),n("p",[a._v("变量和参数必须以一致的顺序出现。第一个变量就是第一个被传递的参数的给定的值，以此类推。")]),a._v(" "),n("p",[a._v("实例")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('<button onclick="myFunction(\'Bill Gates\',\'CEO\')">点击这里</button>\n\n<script>\nfunction myFunction(name,job)\n{\nalert("Welcome " + name + ", the " + job);\n}\n<\/script>\n')])])]),n("p",[a._v('上面的函数会当按钮被点击时提示 "Welcome Bill Gates, the CEO"。')]),a._v(" "),n("p",[a._v("函数很灵活，您可以使用不同的参数来调用该函数，这样就会给出不同的消息：")]),a._v(" "),n("p",[a._v("实例")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("<button onclick=\"myFunction('Harry Potter','Wizard')\">点击这里</button>\n<button onclick=\"myFunction('Bob','Builder')\">点击这里</button>\n")])])]),n("p",[a._v('根据您点击的不同的按钮，上面的例子会提示 "Welcome Harry Potter, the Wizard" 或 "Welcome Bob, the Builder"。')]),a._v(" "),n("p",[a._v("JavaScript 函数对参数的值(arguments)没有进行任何的检查。")]),a._v(" "),n("h3",{attrs:{id:"显式参数与隐藏参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#显式参数与隐藏参数"}},[a._v("#")]),a._v(" 显式参数与隐藏参数")]),a._v(" "),n("p",[a._v("函数显式参数在函数定义时列出。")]),a._v(" "),n("p",[a._v("函数隐藏参数(arguments)在函数调用时传递给函数真正的值。")]),a._v(" "),n("h3",{attrs:{id:"参数规则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参数规则"}},[a._v("#")]),a._v(" 参数规则")]),a._v(" "),n("p",[a._v("JavaScript 函数定义时参数没有指定数据类型。")]),a._v(" "),n("p",[a._v("JavaScript 函数对隐藏参数(arguments)没有进行检测。")]),a._v(" "),n("p",[a._v("JavaScript 函数对隐藏参数(arguments)的个数没有进行检测。")]),a._v(" "),n("h3",{attrs:{id:"默认参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#默认参数"}},[a._v("#")]),a._v(" 默认参数")]),a._v(" "),n("p",[a._v("如果函数在调用时缺少参数，参数会默认设置为： "),n("strong",[a._v("undefined")])]),a._v(" "),n("p",[a._v("有时这是可以接受的，但是建议最好为参数设置一个默认值：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function myFunction(x, y) {\n    if (y === undefined) {\n          y = 0;\n    } \n}\n")])])]),n("p",[a._v("或者，更简单的方式：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function myFunction(x, y) {\n    y = y || 0;\n}\n")])])]),n("h3",{attrs:{id:"arguments-对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#arguments-对象"}},[a._v("#")]),a._v(" Arguments 对象")]),a._v(" "),n("p",[a._v("JavaScript 函数有个内置的对象 arguments 对象.")]),a._v(" "),n("p",[a._v("argument 对象包含了函数调用的参数数组。")]),a._v(" "),n("p",[a._v("通过这种方式你可以很方便的找到最后一个参数的值：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("x = findMax(1, 123, 500, 115, 44, 88);\nfunction findMax() {\n  var i, max = arguments[0];\n  if (arguments.length < 2) {\n    return max;\n  }\n\n  for (i = 1; i < arguments.length; i++) {\n    if (arguments[i] > max) {\n      max = arguments[i];\n    }\n  }\n  return max;\n}\n")])])]),n("h3",{attrs:{id:"通过值传递参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#通过值传递参数"}},[a._v("#")]),a._v(" 通过值传递参数")]),a._v(" "),n("p",[a._v("在函数中调用的参数是函数的参数。")]),a._v(" "),n("p",[a._v("如果函数修改参数的值，将不会修改参数的初始值（在函数外定义）。")]),a._v(" "),n("p",[n("strong",[a._v("实例")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var x = 1;\n// 通过值传递参数\nfunction myFunction(x) {\n    x++; //修改参数x的值，将不会修改在函数外定义的变量 x\n    console.log(x);\n}\nmyFunction(x); // 2\nconsole.log(x); // 1\n")])])]),n("h3",{attrs:{id:"通过对象传递参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#通过对象传递参数"}},[a._v("#")]),a._v(" 通过对象传递参数")]),a._v(" "),n("p",[a._v("在JavaScript中，可以引用对象的值。")]),a._v(" "),n("p",[a._v("因此我们在函数内部修改对象的属性就会修改其初始的值。")]),a._v(" "),n("p",[a._v("修改对象属性可作用于函数外部（全局变量）。")]),a._v(" "),n("p",[n("strong",[a._v("实例")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var obj = {x:1};\n// 通过对象传递参数\nfunction myFunction(obj) {\n    obj.x++; //修改参数对象obj.x的值，函数外定义的obj也将会被修改\n    console.log(obj.x);\n}\nmyFunction(obj); // 2\nconsole.log(obj.x); // 2\n")])])]),n("h2",{attrs:{id:"javascript-内嵌函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript-内嵌函数"}},[a._v("#")]),a._v(" JavaScript 内嵌函数")]),a._v(" "),n("p",[a._v("所有函数都能访问全局变量。")]),a._v(" "),n("p",[a._v("实际上，在 JavaScript 中，所有函数都能访问它们上一层的作用域。")]),a._v(" "),n("p",[a._v("JavaScript 支持嵌套函数。嵌套函数可以访问上一层的函数变量。")]),a._v(" "),n("p",[a._v("该实例中，内嵌函数 "),n("strong",[a._v("plus()")]),a._v(" 可以访问父函数的 "),n("strong",[a._v("counter")]),a._v(" 变量：")]),a._v(" "),n("p",[a._v("实例")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function add() {\n    var counter = 0;\n    function plus() {counter += 1;}\n    plus();    \n    return counter; \n}\n")])])]),n("p",[a._v("如果我们能在外部访问 "),n("strong",[a._v("plus()")]),a._v(" 函数，这样就能解决计数器的困境。")]),a._v(" "),n("p",[a._v("我们同样需要确保 "),n("strong",[a._v("counter = 0")]),a._v(" 只执行一次。")]),a._v(" "),n("p",[n("strong",[a._v("我们需要闭包。")])]),a._v(" "),n("h2",{attrs:{id:"javascript-闭包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript-闭包"}},[a._v("#")]),a._v(" JavaScript 闭包")]),a._v(" "),n("p",[a._v("还记得函数自我调用吗？该函数会做什么？")]),a._v(" "),n("p",[a._v("实例")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var add = (function () {\n    var counter = 0;\n    return function () {return counter += 1;}\n})();\n\nadd();\nadd();\nadd();\n\n// 计数器为 3\n")])])]),n("p",[a._v("说明")]),a._v(" "),n("p",[a._v("变量 "),n("strong",[a._v("add")]),a._v(" 指定了函数自我调用的返回字值。")]),a._v(" "),n("p",[a._v("自我调用函数只执行一次。设置计数器为 0。并返回函数表达式。")]),a._v(" "),n("p",[a._v("add变量可以作为一个函数使用。非常棒的部分是它可以访问函数上一层作用域的计数器。")]),a._v(" "),n("p",[a._v("这个叫作 JavaScript **闭包。**它使得函数拥有私有变量变成可能。")]),a._v(" "),n("p",[a._v("计数器受匿名函数的作用域保护，只能通过 add 方法修改。")]),a._v(" "),n("blockquote",[n("p",[a._v("提示：闭包是可访问上一层函数作用域里变量的函数，即便上一层函数已经关闭。")])])])}),[],!1,null,null,null);t.default=s.exports}}]);