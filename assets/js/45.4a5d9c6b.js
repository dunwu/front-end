(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{434:function(t,e,r){"use strict";r.r(e);var a=r(15),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"redux入门"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redux入门"}},[t._v("#")]),t._v(" Redux入门")]),t._v(" "),r("p",[r("code",[t._v("Redux")]),t._v(" 是 JavaScript 状态容器，提供可预测化的状态管理。")]),t._v(" "),r("p",[t._v("可以让你构建一致化的应用，运行于不同的环境（客户端、服务器、原生应用），并且易于测试。不仅于此，它还提供 超爽的开发体验，比如有一个"),r("a",{attrs:{href:"https://github.com/gaearon/redux-devtools",target:"_blank",rel:"noopener noreferrer"}},[t._v("时间旅行调试器（redux-devtools）"),r("OutboundLink")],1),t._v("可以编辑后实时预览。")]),t._v(" "),r("p",[t._v("Redux 除了和 "),r("a",{attrs:{href:"https://facebook.github.io/react/",target:"_blank",rel:"noopener noreferrer"}},[t._v("React"),r("OutboundLink")],1),t._v(" 一起用外，还支持其它界面库。")]),t._v(" "),r("p",[t._v("Redux 由 "),r("a",{attrs:{href:"http://facebook.github.io/flux/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Flux"),r("OutboundLink")],1),t._v(" 演变而来，但受 "),r("a",{attrs:{href:"http://elm-lang.org/guide/architecture",target:"_blank",rel:"noopener noreferrer"}},[t._v("Elm"),r("OutboundLink")],1),t._v(" 的启发，避开了 Flux 的复杂性。")]),t._v(" "),r("h2",{attrs:{id:"概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),r("h3",{attrs:{id:"动机"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#动机"}},[t._v("#")]),t._v(" 动机")]),t._v(" "),r("p",[t._v("JavaScript 中管理状态的难点：")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("JavaScript 需要管理比任何时候都要多的 state （状态）")]),t._v("。")]),t._v(" "),r("li",[t._v("管理不断变化的 state 非常困难："),r("strong",[t._v("state 在什么时候，由于什么原因，如何变化已然不受控制。")])]),t._v(" "),r("li",[r("strong",[t._v("来自前端开发领域的新需求")]),t._v("，如更新调优、服务端渲染、路由跳转前请求数据等等。")])]),t._v(" "),r("blockquote",[r("p",[r("strong",[t._v("Redux 试图让 state 的变化变得可预测")]),t._v("。")])]),t._v(" "),r("h3",{attrs:{id:"三大原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三大原则"}},[t._v("#")]),t._v(" 三大原则")]),t._v(" "),r("h4",{attrs:{id:"单一数据源"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#单一数据源"}},[t._v("#")]),t._v(" 单一数据源")]),t._v(" "),r("p",[t._v("整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。")]),t._v(" "),r("h4",{attrs:{id:"state-是只读的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#state-是只读的"}},[t._v("#")]),t._v(" State 是只读的")]),t._v(" "),r("p",[t._v("惟一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。")]),t._v(" "),r("h4",{attrs:{id:"使用纯函数来执行修改"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用纯函数来执行修改"}},[t._v("#")]),t._v(" 使用纯函数来执行修改")]),t._v(" "),r("p",[t._v("为了描述 action 如何改变 state tree ，你需要编写 reducers。")])])}),[],!1,null,null,null);e.default=s.exports}}]);