(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{428:function(e,t,n){"use strict";n.r(t);var a=n(15),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"react-快速入门"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-快速入门"}},[e._v("#")]),e._v(" React 快速入门")]),e._v(" "),n("h2",{attrs:{id:"安装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),n("ol",[n("li",[e._v("直接下载使用")])]),e._v(" "),n("p",[e._v("React 可以直接下载使用，下载包中也提供了很多学习的实例。")]),e._v(" "),n("p",[e._v("你可以在官网 "),n("a",{attrs:{href:"http://facebook.github.io/react/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://facebook.github.io/react/"),n("OutboundLink")],1),e._v(" 下载最新版。")]),e._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[e._v("通过 npm 使用 React")])]),e._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[e._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -S react react-dom\n")])])]),n("ol",{attrs:{start:"3"}},[n("li",[e._v("通过 yarn 使用 React")])]),e._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[e._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("yarn")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" react react-dom\n")])])]),n("ol",{attrs:{start:"4"}},[n("li",[n("p",[e._v("使用各种快速构建工具")]),e._v(" "),n("p",[e._v("目前最流行的构建工具应该是 create-react-app，它使得用户可以通过命令就能快速构建 React 开发环境。")]),e._v(" "),n("p",[e._v("create-react-app 自动创建的项目是基于 Webpack + ES6 。")])])]),e._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[e._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -g create-react-app\n$ create-react-app my-app\n$ "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" my-app/\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" start\n")])])]),n("h2",{attrs:{id:"introducing-jsx"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#introducing-jsx"}},[e._v("#")]),e._v(" Introducing JSX")]),e._v(" "),n("p",[e._v("考虑一下这个变量的声明：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const element = <h1>Hello, world!</h1>;\n\n")])])]),n("p",[e._v("这种有趣的标签语法既不是字符串也不是HTML。")]),e._v(" "),n("p",[e._v("这就是 JSX ，他是 JavaScrip 的一种扩展语法。我们推荐在 React 中使用这种语法来描述 UI 信息。JSX 可能会让你想起某种模板语言，但是它具有 JavaScrip 的全部能力。")]),e._v(" "),n("p",[e._v('JSX 可以生成 React "元素"。我们将在'),n("a",{attrs:{href:"http://www.css88.com/react/docs/rendering-elements.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("下一章"),n("OutboundLink")],1),e._v("探索如何把它渲染到DOM上。下面你可以找到 JSX 的基础知识，以帮助您开始使用。")]),e._v(" "),n("h3",{attrs:{id:"jsx-中嵌入表达式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jsx-中嵌入表达式"}},[e._v("#")]),e._v(" JSX 中嵌入表达式")]),e._v(" "),n("p",[e._v("你可以用 花括号 把任意的 "),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript 表达式"),n("OutboundLink")],1),e._v(" 嵌入到 JSX 中。")]),e._v(" "),n("p",[e._v("例如，"),n("code",[e._v("2 + 2")]),e._v("， "),n("code",[e._v("user.firstName")]),e._v("， 和 "),n("code",[e._v("formatName(user)")]),e._v("，这些都是可用的表达式。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function formatName(user) {\n  return user.firstName + ' ' + user.lastName;\n}\n\nconst user = {\n  firstName: 'Harper',\n  lastName: 'Perez'\n};\n\nconst element = (\n  <h1>\n    Hello, {formatName(user)}!\n  </h1>\n);\n\nReactDOM.render(\n  element,\n  document.getElementById('root')\n);\n")])])]),n("p",[n("a",{attrs:{href:"http://codepen.io/gaearon/pen/PGEjdG?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("为便于阅读，我们将JSX分割成多行。我们推荐使用括号将 JSX 包裹起来，虽然这不是必须的，但这样做可以避免"),n("a",{attrs:{href:"http://stackoverflow.com/q/2846283",target:"_blank",rel:"noopener noreferrer"}},[e._v("分号自动插入"),n("OutboundLink")],1),e._v("的陷阱。")]),e._v(" "),n("h3",{attrs:{id:"jsx-也是一个表达式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jsx-也是一个表达式"}},[e._v("#")]),e._v(" JSX 也是一个表达式")]),e._v(" "),n("p",[e._v("编译之后，JSX 表达式就变成了常规的 JavaScript 对象。")]),e._v(" "),n("p",[e._v("这意味着你可以在 "),n("code",[e._v("if")]),e._v(" 语句或者是 "),n("code",[e._v("for")]),e._v(" 循环中使用 JSX，用它给变量赋值，当做参数接收，或者作为函数的返回值。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function getGreeting(user) {\n  if (user) {\n    return <h1>Hello, {formatName(user)}!</h1>;\n  }\n  return <h1>Hello, Stranger.</h1>;\n}\n\n")])])]),n("h3",{attrs:{id:"用-jsx-指定属性值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用-jsx-指定属性值"}},[e._v("#")]),e._v(" 用 JSX 指定属性值")]),e._v(" "),n("p",[e._v("您可以使用双引号来指定字符串字面量作为属性值：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('const element = <div tabIndex="0"></div>;\n\n')])])]),n("p",[e._v("您也可以用花括号嵌入一个 JavaScript 表达式作为属性值:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const element = <img src={user.avatarUrl}></img>;\n\n")])])]),n("p",[e._v("在属性中嵌入 JavaScript 表达式时，不要使用引号来包裹大括号。否则，JSX 将该属性视为字符串字面量而不是表达式。对于字符串值你应该使用引号，对于表达式你应该使用大括号，但两者不能同时用于同一属性。")]),e._v(" "),n("h3",{attrs:{id:"用-jsx-指定子元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用-jsx-指定子元素"}},[e._v("#")]),e._v(" 用 JSX 指定子元素")]),e._v(" "),n("p",[e._v("如果是空标签，您应该像 XML 一样，使用 "),n("code",[e._v("/>")]),e._v("立即闭合它：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const element = <img src={user.avatarUrl} />;\n\n")])])]),n("p",[e._v("JSX 标签可能包含子元素：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const element = (\n  <div>\n    <h1>Hello!</h1>\n    <h2>Good to see you here.</h2>\n  </div>\n);\n\n")])])]),n("blockquote",[n("p",[n("strong",[e._v("警告：")])]),e._v(" "),n("p",[e._v("比起 HTML ， JSX 更接近于 JavaScript ， 所以 React DOM 使用驼峰("),n("code",[e._v("camelCase")]),e._v(")属性命名约定, 而不是HTML属性名称。")]),e._v(" "),n("p",[e._v("例如，"),n("code",[e._v("class")]),e._v(" 在JSX中变为"),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Element/className",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("className")]),n("OutboundLink")],1),e._v("，"),n("code",[e._v("tabindex")]),e._v(" 变为 "),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/tabIndex",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("tabIndex")]),n("OutboundLink")],1),e._v("。")])]),e._v(" "),n("h3",{attrs:{id:"jsx-防止注入攻击"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jsx-防止注入攻击"}},[e._v("#")]),e._v(" JSX 防止注入攻击")]),e._v(" "),n("p",[e._v("在JSX中嵌入用户输入是安全的：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const title = response.potentiallyMaliciousInput;\n// This is safe:\nconst element = <h1>{title}</h1>;\n\n")])])]),n("p",[e._v("默认情况下， 在渲染之前, React DOM 会格式化("),n("a",{attrs:{href:"http://stackoverflow.com/questions/7381974/which-characters-need-to-be-escaped-on-html",target:"_blank",rel:"noopener noreferrer"}},[e._v("escapes"),n("OutboundLink")],1),e._v(") JSX中的所有值. 从而保证用户无法注入任何应用之外的代码. 在被渲染之前，所有的数据都被转义成为了字符串处理。 以避免 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Cross-site_scripting",target:"_blank",rel:"noopener noreferrer"}},[e._v("XSS(跨站脚本)"),n("OutboundLink")],1),e._v(" 攻击。")]),e._v(" "),n("h3",{attrs:{id:"jsx-表示对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jsx-表示对象"}},[e._v("#")]),e._v(" JSX 表示对象")]),e._v(" "),n("p",[e._v("Babel 将JSX编译成 "),n("code",[e._v("React.createElement()")]),e._v(" 调用。")]),e._v(" "),n("p",[e._v("下面的两个例子是是完全相同的：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('const element = (\n  <h1 className="greeting">\n    Hello, world!\n  </h1>\n);\n\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const element = React.createElement(\n  'h1',\n  {className: 'greeting'},\n  'Hello, world!'\n);\n\n")])])]),n("p",[n("code",[e._v("React.createElement()")]),e._v(" 会执行一些检查来帮助你编写没有bug的代码，但基本上它会创建一个如下所示的对象：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 注意: 这是简化的结构\nconst element = {\n  type: 'h1',\n  props: {\n    className: 'greeting',\n    children: 'Hello, world'\n  }\n};\n\n")])])]),n("p",[e._v("这些对象被称作“React元素”。你可以把他们想象成为你想在屏幕上显示内容的一种描述。React会读取这些对象，用他们来构建DOM，并且保持它们的不断更新。")]),e._v(" "),n("p",[e._v("我们将在下一节中来探索如何将 React 元素渲染到 DOM 上。")]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("提示:")])]),e._v(" "),n("p",[e._v('我们建议你去搜一下你用的编辑器的 "Babel" 语法方案, 以便 ES6 和 JSX 代码都能够被正确高亮的显示。')])]),e._v(" "),n("h2",{attrs:{id:"渲染元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#渲染元素"}},[e._v("#")]),e._v(" 渲染元素")]),e._v(" "),n("p",[e._v("元素(Elements)是 React 应用中最小的建造部件（或者说构建块，building blocks）。")]),e._v(" "),n("p",[e._v("一个元素用于描述你在将在屏幕上看到的内容：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const element = <h1>Hello, world</h1>;\n\n")])])]),n("p",[e._v("不同于浏览器的 DOM 元素， React 元素是普通的对象，非常容易创建。React DOM 会负责更新 DOM ，以匹配React元素（愚人码头注：DOM元素与React元素保持一致）。")]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("注意：")])]),e._v(" "),n("p",[e._v('有人可能会将元素与更广为人知的 "组件(Components)" 概念相混淆。我们将在'),n("a",{attrs:{href:"http://www.css88.com/react/docs/components-and-props.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("下一节"),n("OutboundLink")],1),e._v('介绍组件。元素是构成组件的"材料"， 所以我们建议你看完本节再进入下一节。')])]),e._v(" "),n("h3",{attrs:{id:"渲染一个元素到-dom"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#渲染一个元素到-dom"}},[e._v("#")]),e._v(" 渲染一个元素到 DOM")]),e._v(" "),n("p",[e._v("我们假设你的 HTML 文件中的什么地方有这么一个``：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<div id="root"></div>\n\n')])])]),n("p",[e._v('我们称这个是一个 "根" DOM 节点，因为该节点内的所有内容都由 React DOM 管理。')]),e._v(" "),n("p",[e._v("单纯用 React 构建的应用程序通常只有一个单独的 根 DOM 节点。但如果你要把 React 整合进现有的app中 ，那你可能会有多个相互独立的根DOM节点。")]),e._v(" "),n("p",[e._v("要渲染一个 React 元素到一个 根 DOM 节点，吧它们传递给 "),n("code",[e._v("ReactDOM.render()")]),e._v(" 方法：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const element = <h1>Hello, world</h1>;\nReactDOM.render(\n  element,\n  document.getElementById('root')\n);\n\n")])])]),n("p",[n("a",{attrs:{href:"http://codepen.io/gaearon/pen/rrpgNB?editors=1010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v('上面代码会在页面上显示 "Hello, world" 。')]),e._v(" "),n("h3",{attrs:{id:"更新已渲染的元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#更新已渲染的元素"}},[e._v("#")]),e._v(" 更新已渲染的元素")]),e._v(" "),n("p",[e._v("React元素是 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Immutable_object",target:"_blank",rel:"noopener noreferrer"}},[e._v("不可突变（immutable）"),n("OutboundLink")],1),e._v(" 的. 一旦你创建了一个元素, 就不能再修改其子元素或任何属性。一个元素就像电影里的一帧: 它表示在某一特定时间点的 UI 。")]),e._v(" "),n("p",[e._v("就我们所知, 更新 UI 的唯一方法是创建一个新的元素, 并将其传入"),n("code",[e._v("ReactDOM.render()")]),e._v("方法.")]),e._v(" "),n("p",[e._v("思考以下时钟例子:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function tick() {\n  const element = (\n    <div>\n      <h1>Hello, world!</h1>\n      <h2>It is {new Date().toLocaleTimeString()}.</h2>\n    </div>\n  );\n  ReactDOM.render(\n    element,\n    document.getElementById('root')\n  );\n}\n\nsetInterval(tick, 1000);\n\n")])])]),n("p",[n("a",{attrs:{href:"http://codepen.io/gaearon/pen/gwoJZk?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("以上代码每隔 1 秒, 就会通过 "),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("setInterval()")]),n("OutboundLink")],1),e._v(" 回调 "),n("code",[e._v("ReactDOM.render()")]),e._v(" 方法来重新渲染元素。")]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("注意：")])]),e._v(" "),n("p",[e._v("实际上，大多数 React 应用只会调用 "),n("code",[e._v("ReactDOM.render()")]),e._v(" 一次。在接下来的章节中，我们将学习如何将这些代码封装到"),n("a",{attrs:{href:"http://www.css88.com/react/docs/state-and-lifecycle.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("有状态的组件中"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("我们建议您不要跳过任何一节，因为每一节之间都是彼此有联系的。")])]),e._v(" "),n("h3",{attrs:{id:"react-只更新必需要更新的部分"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-只更新必需要更新的部分"}},[e._v("#")]),e._v(" React 只更新必需要更新的部分")]),e._v(" "),n("p",[e._v("React DOM 会将元素及其子元素与之前版本逐一对比, 并只对有必要更新的 DOM 进行更新, 以达到 DOM 所需的状态。")]),e._v(" "),n("p",[e._v("你可以用浏览器工具对 "),n("a",{attrs:{href:"http://codepen.io/gaearon/pen/gwoJZk?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("上一个例子"),n("OutboundLink")],1),e._v(" 进行检查来验证这一点:")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://www.css88.com/react/img/docs/granular-dom-updates.gif",alt:"DOM 检查器显示颗粒状的更新"}})]),e._v(" "),n("p",[e._v("即使我们我们每隔 1 秒都重建了整个元素, 但实际上 React DOM 只更新了修改过的文本节点.")]),e._v(" "),n("p",[e._v("在我们的经验中, 关注每个时间点UI的表现, 而不是关注随着时间不断更新UI的状态, 可以减少很多奇怪的 bug 。")]),e._v(" "),n("h2",{attrs:{id:"组件-components-和-属性-props"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件-components-和-属性-props"}},[e._v("#")]),e._v(" 组件(Components) 和 属性(Props)")]),e._v(" "),n("p",[e._v("组件使你可以将 UI 划分为一个一个独立，可复用的小部件，并可以对每个部件进行单独的设计。")]),e._v(" "),n("p",[e._v('从定义上来说， 组件就像JavaScript的函数。组件可以接收任意输入(称为"props")， 并返回 React 元素，用以描述屏幕显示内容。')]),e._v(" "),n("blockquote",[n("p",[e._v("愚人码头注：Props ， 即属性(Property)， 在代码中写作 props ， 故可用 props 指代 properties .")])]),e._v(" "),n("h3",{attrs:{id:"函数式组件和类组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数式组件和类组件"}},[e._v("#")]),e._v(" 函数式组件和类组件")]),e._v(" "),n("p",[e._v("最简单的定义组件的方法是写一个 JavaScript 函数:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\n")])])]),n("p",[e._v("这个函数是一个合法的 React 组件，因为它接收一个 "),n("code",[e._v("props")]),e._v(' 参数, 并返回一个 React 元素。 我们把此类组件称为"函数式(Functional)"组件， 因为从字面上看来它就是一个 JavaScript 函数。')]),e._v(" "),n("p",[e._v("你也可以用一个 "),n("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes",target:"_blank",rel:"noopener noreferrer"}},[e._v("ES6 的 class"),n("OutboundLink")],1),e._v(" 来定义一个组件:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class Welcome extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\n\n")])])]),n("p",[e._v("上面两个组件从 React 的角度来看是等效的。")]),e._v(" "),n("p",[e._v("类组件有一些额外的特性，我们将在"),n("a",{attrs:{href:"http://www.css88.com/react/docs/state-and-lifecycle.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("下一节"),n("OutboundLink")],1),e._v("讨论。在此之前, 我们先用函数式组件，因为它们更加简洁。")]),e._v(" "),n("h3",{attrs:{id:"渲染一个组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#渲染一个组件"}},[e._v("#")]),e._v(" 渲染一个组件")]),e._v(" "),n("p",[e._v("在前面, 我们只遇到代表 DOM 标签的 React 元素：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const element = <div />;\n\n")])])]),n("p",[e._v("然而，元素也可以代表用户定义的组件：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('const element = <Welcome name="Sara" />;\n\n')])])]),n("p",[e._v('当 React 遇到一个代表用户定义组件的元素时，它将 JSX 属性以一个单独对象的形式传递给相应的组件。 我们将其称为 "props" 对象。')]),e._v(" "),n("p",[e._v('比如, 以下代码在页面上渲染 "Hello, Sara" ：')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\nconst element = <Welcome name=\"Sara\" />;\nReactDOM.render(\n  element,\n  document.getElementById('root')\n);\n\n")])])]),n("p",[n("a",{attrs:{href:"http://codepen.io/gaearon/pen/YGYmEG?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("我们简单扼要重述一下上面这个例子:")]),e._v(" "),n("ol",[n("li",[e._v("我们调用了 "),n("code",[e._v("ReactDOM.render()")]),e._v(" 方法并向其中传入了 `` 元素。")]),e._v(" "),n("li",[e._v("React 调用 "),n("code",[e._v("Welcome")]),e._v(" 组件，并向其中传入了 "),n("code",[e._v("{name: 'Sara'}")]),e._v(" 作为 props 对象。")]),e._v(" "),n("li",[n("code",[e._v("Welcome")]),e._v(" 组件返回 "),n("code",[e._v("Hello, Sara")]),e._v("。")]),e._v(" "),n("li",[e._v("React DOM 迅速更新 DOM ，使其显示为 "),n("code",[e._v("Hello, Sara")]),e._v("。")])]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("警告：")])]),e._v(" "),n("p",[e._v("组件名称总是以大写字母开始。")]),e._v(" "),n("p",[e._v("举例来说, "),n("code",[e._v("代表一个 DOM 标签，而")]),e._v(" 则代表一个组件，并且需要在作用域中有一个 "),n("code",[e._v("Welcome")]),e._v(" 组件。")])]),e._v(" "),n("h3",{attrs:{id:"构成组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#构成组件"}},[e._v("#")]),e._v(" 构成组件")]),e._v(" "),n("p",[e._v("组件可以在它们的输出中引用其它组件。这使得我们可以使用同样的组件来抽象到任意层级。一个按钮，一个表单，一个对话框，一个屏幕：在 React 应用中，所有这些都通常描述为组件。")]),e._v(" "),n("p",[e._v("例如，我们可以创建一个 "),n("code",[e._v("App")]),e._v(" 组件，并在其内部多次渲染 "),n("code",[e._v("Welcome")]),e._v("：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('function Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\nfunction App() {\n  return (\n    <div>\n      <Welcome name="Sara" />\n      <Welcome name="Cahal" />\n      <Welcome name="Edite" />\n    </div>\n  );\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\'root\')\n);\n')])])]),n("p",[n("a",{attrs:{href:"http://codepen.io/gaearon/pen/KgQKPr?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("通常，新的 React apps 都有一个单独的顶层 "),n("code",[e._v("App")]),e._v(" 组件。然而，如果你在已有的应用中整合 React，你可以需要由下至上地, 从类似于 "),n("code",[e._v("Button")]),e._v(" 这样的小组件开始, 逐渐整合到视图层的顶层。")]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("警告：")])]),e._v(" "),n("p",[e._v("组件必须返回一个单独的根元素。这就是为什么我们添加一个 "),n("code",[e._v("来包含所有")]),e._v(" 元素的原因。")])]),e._v(" "),n("h3",{attrs:{id:"提取组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#提取组件"}},[e._v("#")]),e._v(" 提取组件")]),e._v(" "),n("p",[e._v("不要害怕把一个组件分为多个更小的组件。")]),e._v(" "),n("p",[e._v("举个例子，思考下名 "),n("code",[e._v("Comment")]),e._v(" 组件：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('function Comment(props) {\n  return (\n    <div className="Comment">\n      <div className="UserInfo">\n        <img className="Avatar"\n          src={props.author.avatarUrl}\n          alt={props.author.name}\n        />\n        <div className="UserInfo-name">\n          {props.author.name}\n        </div>\n      </div>\n      <div className="Comment-text">\n        {props.text}\n      </div>\n      <div className="Comment-date">\n        {formatDate(props.date)}\n      </div>\n    </div>\n  );\n}\n\n')])])]),n("p",[n("a",{attrs:{href:"http://codepen.io/gaearon/pen/VKQwEo?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("它接受 "),n("code",[e._v("author")]),e._v("（一个对象），"),n("code",[e._v("text")]),e._v("（一个字符串）和 "),n("code",[e._v("date")]),e._v("（一个日期）作为 props，并用于在某社交网站中描述一条评论。")]),e._v(" "),n("p",[e._v("这个组件修改起来很麻烦，因为它是被嵌套的，而且很难复用其中的某个部分。让我们从其中提取一些组件。")]),e._v(" "),n("p",[e._v("首先，提取头像 "),n("code",[e._v("Avatar")]),e._v("：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('function Avatar(props) {\n  return (\n    <img className="Avatar"\n      src={props.user.avatarUrl}\n      alt={props.user.name}\n    />\n  );\n}\n\n')])])]),n("p",[n("code",[e._v("Avatar")]),e._v(" 组件不用关心它在 "),n("code",[e._v("Comment")]),e._v(" 中是如何渲染的。这是为什么我们它的 prop 一个更通用的属性名: "),n("code",[e._v("user")]),e._v(", 而不是 "),n("code",[e._v("author")]),e._v(" 的原因。")]),e._v(" "),n("p",[e._v("我们建议从组件本身的角度来命名 props 而不是它被使用的上下文环境。")]),e._v(" "),n("p",[e._v("我们可以稍微简化一下 "),n("code",[e._v("Comment")]),e._v(" 组件:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('function Comment(props) {\n  return (\n    <div className="Comment">\n      <div className="UserInfo">\n        <Avatar user={props.author} />\n        <div className="UserInfo-name">\n          {props.author.name}\n        </div>\n      </div>\n      <div className="Comment-text">\n        {props.text}\n      </div>\n      <div className="Comment-date">\n        {formatDate(props.date)}\n      </div>\n    </div>\n  );\n}\n\n')])])]),n("p",[e._v("接下来，我们提取用户信息 "),n("code",[e._v("UserInfo")]),e._v(" 组件， 用于将 "),n("code",[e._v("Avatar")]),e._v(" 显示在用户名旁边：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('function UserInfo(props) {\n  return (\n    <div className="UserInfo">\n      <Avatar user={props.user} />\n      <div className="UserInfo-name">\n        {props.user.name}\n      </div>\n    </div>\n  );\n}\n\n')])])]),n("p",[e._v("这使我们可以进一步简化 "),n("code",[e._v("Comment")]),e._v(" 组件：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('function Comment(props) {\n  return (\n    <div className="Comment">\n      <UserInfo user={props.author} />\n      <div className="Comment-text">\n        {props.text}\n      </div>\n      <div className="Comment-date">\n        {formatDate(props.date)}\n      </div>\n    </div>\n  );\n}\n\n')])])]),n("p",[n("a",{attrs:{href:"http://codepen.io/gaearon/pen/rrJNJY?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("提取组件可能看起来是一个繁琐的工作，但是在大型的 Apps 中可以回报给我们的是大量的可复用组件。一个好的经验准则是如果你 UI 的一部分需要用多次 ("),n("code",[e._v("Button")]),e._v("，"),n("code",[e._v("Panel")]),e._v("，"),n("code",[e._v("Avatar")]),e._v(")，或者本身足够复杂("),n("code",[e._v("App")]),e._v("，"),n("code",[e._v("FeedStory")]),e._v("，"),n("code",[e._v("Comment")]),e._v(")，最好的做法是使其成为可复用组件。")]),e._v(" "),n("h3",{attrs:{id:"props-是只读的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#props-是只读的"}},[e._v("#")]),e._v(" Props 是只读的")]),e._v(" "),n("p",[e._v("无论你用"),n("a",{attrs:{href:"http://www.css88.com/react/docs/components-and-props.html#functional-and-class-components",target:"_blank",rel:"noopener noreferrer"}},[e._v("函数或类"),n("OutboundLink")],1),e._v("的方法来声明组件, 它都无法修改其自身 props. 思考下列 "),n("code",[e._v("sum")]),e._v(" (求和)函数:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function sum(a, b) {\n  return a + b;\n}\n\n")])])]),n("p",[e._v("这种函数称为 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Pure_function",target:"_blank",rel:"noopener noreferrer"}},[e._v("“纯函数”"),n("OutboundLink")],1),e._v(" ，因为它们不会试图改变它们的输入，并且对于同样的输入,始终可以得到相同的结果。")]),e._v(" "),n("p",[e._v("反之， 以下是非纯函数， 因为它改变了自身的输入值：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function withdraw(account, amount) {\n  account.total -= amount;\n}\n\n")])])]),n("p",[e._v("虽然 React 很灵活，但是它有一条严格的规则：")]),e._v(" "),n("p",[n("strong",[e._v("所有 React 组件都必须是纯函数，并禁止修改其自身 props 。")])]),e._v(" "),n("p",[e._v("当然， 应用 UI 总是动态的，并且随时有可以改变。 所以在"),n("a",{attrs:{href:"http://www.css88.com/react/docs/state-and-lifecycle.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("下一节"),n("OutboundLink")],1),e._v(", 我们会介绍一个新的概念"),n("code",[e._v("state")]),e._v("(状态) 。"),n("code",[e._v("state")]),e._v(" 允许 React 组件在不违反上述规则的情况下, 根据用户操作, 网络响应, 或者其他随便什么东西, 来动态地改变其输出。")]),e._v(" "),n("h1",{attrs:{id:"状态-state-和生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#状态-state-和生命周期"}},[e._v("#")]),e._v(" 状态(State) 和生命周期")]),e._v(" "),n("p",[e._v("思考"),n("a",{attrs:{href:"http://www.css88.com/react/docs/rendering-elements.html#updating-the-rendered-element",target:"_blank",rel:"noopener noreferrer"}},[e._v("前面章节"),n("OutboundLink")],1),e._v("中提到过的时钟例子.")]),e._v(" "),n("p",[e._v("目前为止我们只学了一种更新UI的方式。")]),e._v(" "),n("p",[e._v("我们通过调 "),n("code",[e._v("ReactDOM.render()")]),e._v(" 方法来更新渲染的输出:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function tick() {\n  const element = (\n    <div>\n      <h1>Hello, world!</h1>\n      <h2>It is {new Date().toLocaleTimeString()}.</h2>\n    </div>\n  );\n  ReactDOM.render(\n    element,\n    document.getElementById('root')\n  );\n}\n\nsetInterval(tick, 1000);\n")])])]),n("p",[n("a",{attrs:{href:"http://codepen.io/gaearon/pen/gwoJZk?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("在本节中，我们将学习如何使 "),n("code",[e._v("Clock")]),e._v(" 组件变得真正可复用 和 封装的更好。它将设置自己的计时器，并在每秒更新自身。")]),e._v(" "),n("p",[e._v("我们可以从封装时钟开始：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Clock(props) {\n  return (\n    <div>\n      <h1>Hello, world!</h1>\n      <h2>It is {props.date.toLocaleTimeString()}.</h2>\n    </div>\n  );\n}\n\nfunction tick() {\n  ReactDOM.render(\n    <Clock date={new Date()} />,\n    document.getElementById('root')\n  );\n}\n\nsetInterval(tick, 1000);\n\n")])])]),n("p",[n("a",{attrs:{href:"http://codepen.io/gaearon/pen/dpdoYR?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("然而，它没有满足一个关键的要求："),n("code",[e._v("Clock")]),e._v(" 设置定时器并每秒更新 UI ，事实上应该是 "),n("code",[e._v("Clock")]),e._v("自身实现的一部分。")]),e._v(" "),n("p",[e._v("理想情况下，我们应该只引用一个 "),n("code",[e._v("Clock")]),e._v(" , 然后让它自动计时并更新:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ReactDOM.render(\n  <Clock />,\n  document.getElementById('root')\n);\n\n")])])]),n("p",[e._v("要实现这点，我们需要添加 "),n("code",[e._v("state")]),e._v(" 到 "),n("code",[e._v("Clock")]),e._v(" 组件。")]),e._v(" "),n("p",[n("code",[e._v("state")]),e._v(" 和 "),n("code",[e._v("props")]),e._v(" 类似，但是它是私有的，并且由组件本身完全控制。")]),e._v(" "),n("p",[e._v("我们"),n("a",{attrs:{href:"http://www.css88.com/react/docs/components-and-props.html#functional-and-class-components",target:"_blank",rel:"noopener noreferrer"}},[e._v("之前提到过"),n("OutboundLink")],1),e._v(', 用类定义的组件有一些额外的特性。 这个"类专有的特性"， 指的就是局部状态。')]),e._v(" "),n("h2",{attrs:{id:"把函数式组件转化为类组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#把函数式组件转化为类组件"}},[e._v("#")]),e._v(" 把函数式组件转化为类组件")]),e._v(" "),n("p",[e._v("你可以遵从以下5步, 把一个类似 "),n("code",[e._v("Clock")]),e._v(" 这样的函数式组件转化为类组件：")]),e._v(" "),n("ol",[n("li",[e._v("创建一个继承自 "),n("code",[e._v("React.Component")]),e._v(" 类的 "),n("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes",target:"_blank",rel:"noopener noreferrer"}},[e._v("ES6 class"),n("OutboundLink")],1),e._v(" 同名类。")]),e._v(" "),n("li",[e._v("添加一个名为 "),n("code",[e._v("render()")]),e._v(" 的空方法。")]),e._v(" "),n("li",[e._v("把原函数中的所有内容移至 "),n("code",[e._v("render()")]),e._v(" 中。")]),e._v(" "),n("li",[e._v("在 "),n("code",[e._v("render()")]),e._v(" 方法中使用 "),n("code",[e._v("this.props")]),e._v(" 替代 "),n("code",[e._v("props")]),e._v("。")]),e._v(" "),n("li",[e._v("删除保留的空函数声明。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class Clock extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.props.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\n")])])]),n("p",[n("a",{attrs:{href:"http://codepen.io/gaearon/pen/zKRGpo?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[n("code",[e._v("Clock")]),e._v(" 现在被定为类组件，而不是函数式组件。")]),e._v(" "),n("p",[e._v("类允许我们在其中添加本地状态(state)和生命周期钩子。")]),e._v(" "),n("h2",{attrs:{id:"在类组件中添加本地状态-state"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在类组件中添加本地状态-state"}},[e._v("#")]),e._v(" 在类组件中添加本地状态(state)")]),e._v(" "),n("p",[e._v("我们现在通过以下3步, 把"),n("code",[e._v("date")]),e._v("从属性("),n("code",[e._v("props")]),e._v(") 改为 状态("),n("code",[e._v("state")]),e._v(")：")]),e._v(" "),n("p",[e._v("We will move the "),n("code",[e._v("date")]),e._v(" from props to state in three steps:")]),e._v(" "),n("ol",[n("li",[e._v("替换 "),n("code",[e._v("render()")]),e._v(" 方法中的 "),n("code",[e._v("this.props.date")]),e._v(" 为 "),n("code",[e._v("this.state.date")]),e._v("：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class Clock extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[e._v("添加一个 "),n("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes#Constructor",target:"_blank",rel:"noopener noreferrer"}},[e._v("类构造函数(class constructor)"),n("OutboundLink")],1),e._v(" 初始化 "),n("code",[e._v("this.state")]),e._v(":")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\n")])])]),n("p",[e._v("注意我们如何将 "),n("code",[e._v("props")]),e._v(" 传递给基础构造函数：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n")])])]),n("p",[e._v("类组件应始终使用 "),n("code",[e._v("props")]),e._v(" 调用基础构造函数。")]),e._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[e._v("移除 `` 元素中的 "),n("code",[e._v("date")]),e._v(" 属性：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ReactDOM.render(\n  <Clock />,\n  document.getElementById('root')\n);\n\n")])])]),n("p",[e._v("我们稍后再把 计时器代码 添加到组件内部。")]),e._v(" "),n("p",[e._v("现有的结果是这样:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Clock />,\n  document.getElementById('root')\n);\n\n")])])]),n("p",[n("a",{attrs:{href:"http://codepen.io/gaearon/pen/KgQpJd?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("接下来，我们将使 "),n("code",[e._v("Clock")]),e._v(" 设置自己的计时器，并每秒更新一次。")]),e._v(" "),n("h2",{attrs:{id:"在类中添加生命周期方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在类中添加生命周期方法"}},[e._v("#")]),e._v(" 在类中添加生命周期方法")]),e._v(" "),n("p",[e._v("在一个具有许多组件的应用程序中，在组件被销毁时释放所占用的资源是非常重要的。")]),e._v(" "),n("p",[e._v("当 "),n("code",[e._v("Clock")]),e._v(" 第一次渲染到DOM时，我们要"),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval",target:"_blank",rel:"noopener noreferrer"}},[e._v("设置一个定时器"),n("OutboundLink")],1),e._v(' 。 这在 React 中称为 "挂载(mounting)" 。')]),e._v(" "),n("p",[e._v("当 "),n("code",[e._v("Clock")]),e._v(" 产生的 DOM 被销毁时，我们也想"),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval",target:"_blank",rel:"noopener noreferrer"}},[e._v("清除该计时器"),n("OutboundLink")],1),e._v('。 这在 React 中称为 "卸载(unmounting)" 。')]),e._v(" "),n("p",[e._v("当组件挂载和卸载时，我们可以在组件类上声明特殊的方法来运行一些代码：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  componentDidMount() {\n\n  }\n\n  componentWillUnmount() {\n\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\n")])])]),n("p",[e._v('这些方法称为 "生命周期钩子"。')]),e._v(" "),n("p",[n("code",[e._v("componentDidMount()")]),e._v(" 钩子在组件输出被渲染到 DOM 之后运行。这是设置时钟的不错的位置：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n")])])]),n("p",[e._v("注意我们把计时器ID直接存在 "),n("code",[e._v("this")]),e._v(" 中。")]),e._v(" "),n("p",[n("code",[e._v("this.props")]),e._v(" 由 React 本身设定, 而 "),n("code",[e._v("this.state")]),e._v(" 具有特殊的含义，但如果需要存储一些不用于视觉输出的内容，则可以手动向类中添加额外的字段。")]),e._v(" "),n("p",[e._v("如果在 "),n("code",[e._v("render()")]),e._v(" 方法中没有被引用, 它不应该出现在 state 中。")]),e._v(" "),n("p",[e._v("我们在"),n("code",[e._v("componentWillUnmount()")]),e._v("生命周期钩子中取消这个计时器：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n")])])]),n("p",[e._v("最后，我们将会实现每秒运行的 "),n("code",[e._v("tick()")]),e._v(" 方法。")]),e._v(" "),n("p",[e._v("它将使用 "),n("code",[e._v("this.setState()")]),e._v(" 来来周期性地更新组件本地状态：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Clock />,\n  document.getElementById('root')\n);\n\n")])])]),n("p",[n("a",{attrs:{href:"http://codepen.io/gaearon/pen/amqdNA?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("现在这个时钟每秒都会走了。")]),e._v(" "),n("p",[e._v("我们来快速回顾一下该过程，以及调用方法的顺序：")]),e._v(" "),n("ol",[n("li",[e._v("当 `` 被传入 "),n("code",[e._v("ReactDOM.render()")]),e._v(" 时, React 会调用 "),n("code",[e._v("Clock")]),e._v("组件的构造函数。 因为"),n("code",[e._v("Clock")]),e._v(" 要显示的是当前时间，所以它将使用包含当前时间的对象来初始化 "),n("code",[e._v("this.state")]),e._v("。我们稍后会更新此状态。")]),e._v(" "),n("li",[e._v("然后 React 调用了 "),n("code",[e._v("Clock")]),e._v(" 组件的 "),n("code",[e._v("render()")]),e._v(" 方法。 React 从该方法返回内容中得到要显示在屏幕上的内容。然后，React 然后更新 DOM 以匹配 "),n("code",[e._v("Clock")]),e._v(" 的渲染输出。")]),e._v(" "),n("li",[e._v("当 "),n("code",[e._v("Clock")]),e._v(" 输出被插入到 DOM 中时，React 调用 "),n("code",[e._v("componentDidMount()")]),e._v(" 生命周期钩子。在该方法中，"),n("code",[e._v("Clock")]),e._v(" 组件请求浏览器设置一个定时器来一次调用 "),n("code",[e._v("tick()")]),e._v("。")]),e._v(" "),n("li",[e._v("浏览器会每隔一秒调用一次 "),n("code",[e._v("tick()")]),e._v("方法。在该方法中， "),n("code",[e._v("Clock")]),e._v(" 组件通过 "),n("code",[e._v("setState()")]),e._v(" 方法并传递一个包含当前时间的对象来安排一个 UI 的更新。通过 "),n("code",[e._v("setState()")]),e._v(", React 得知了组件 "),n("code",[e._v("state")]),e._v("(状态)的变化, 随即再次调用 "),n("code",[e._v("render()")]),e._v(" 方法，获取了当前应该显示的内容。 这次，"),n("code",[e._v("render()")]),e._v(" 方法中的 "),n("code",[e._v("this.state.date")]),e._v(" 的值已经发生了改变， 从而，其输出的内容也随之改变。React 于是据此对 DOM 进行更新。")]),e._v(" "),n("li",[e._v("如果通过其他操作将 "),n("code",[e._v("Clock")]),e._v(" 组件从 DOM 中移除了, React 会调用"),n("code",[e._v("componentWillUnmount()")]),e._v(" 生命周期钩子, 所以计时器也会被停止。")])]),e._v(" "),n("h2",{attrs:{id:"正确地使用-state-状态"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#正确地使用-state-状态"}},[e._v("#")]),e._v(" 正确地使用 State(状态)")]),e._v(" "),n("p",[e._v("关于 "),n("code",[e._v("setState()")]),e._v(" 有三件事是你应该知道的。")]),e._v(" "),n("h3",{attrs:{id:"不要直接修改-state-状态"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不要直接修改-state-状态"}},[e._v("#")]),e._v(" 不要直接修改 state(状态)")]),e._v(" "),n("p",[e._v("例如，这样将不会重新渲染一个组件：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 错误\nthis.state.comment = 'Hello';\n\n")])])]),n("p",[e._v("用 "),n("code",[e._v("setState()")]),e._v(" 代替：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 正确\nthis.setState({comment: 'Hello'});\n\n")])])]),n("p",[e._v("唯一可以分配 "),n("code",[e._v("this.state")]),e._v(" 的地方是构造函数。")]),e._v(" "),n("h3",{attrs:{id:"state-状态-更新可能是异步的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#state-状态-更新可能是异步的"}},[e._v("#")]),e._v(" state(状态) 更新可能是异步的")]),e._v(" "),n("p",[e._v("React 为了优化性能，有可能会将多个 "),n("code",[e._v("setState()")]),e._v(" 调用合并为一次更新。")]),e._v(" "),n("p",[e._v("因为 "),n("code",[e._v("this.props")]),e._v(" 和 "),n("code",[e._v("this.state")]),e._v(" 可能是异步更新的，你不能依赖他们的值计算下一个state(状态)。")]),e._v(" "),n("p",[e._v("例如, 以下代码可能导致 "),n("code",[e._v("counter")]),e._v("(计数器)更新失败：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 错误\nthis.setState({\n  counter: this.state.counter + this.props.increment,\n});\n\n")])])]),n("p",[e._v("要解决这个问题，应该使用第 2 种 "),n("code",[e._v("setState()")]),e._v(" 的格式，它接收一个函数，而不是一个对象。该函数接收前一个状态值作为第 1 个参数， 并将更新后的值作为第 21个参数:")]),e._v(" "),n("p",[e._v("要弥补这个问题，使用另一种 setState() 的形式，它接受一个函数而不是一个对象。这个函数将接收前一个状态作为第一个参数，应用更新时的 props 作为第二个参数：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 正确\nthis.setState((prevState, props) => ({\n  counter: prevState.counter + props.increment\n}));\n\n")])])]),n("p",[e._v("我们在上面使用了一个"),n("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions",target:"_blank",rel:"noopener noreferrer"}},[e._v("箭头函数"),n("OutboundLink")],1),e._v("，但是也可以使用一个常规的函数：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 正确\nthis.setState(function(prevState, props) {\n  return {\n    counter: prevState.counter + props.increment\n  };\n});\n\n")])])]),n("h3",{attrs:{id:"state-状态-更新会被合并"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#state-状态-更新会被合并"}},[e._v("#")]),e._v(" state(状态)更新会被合并")]),e._v(" "),n("p",[e._v("当你调用 "),n("code",[e._v("setState()")]),e._v("， React 将合并你提供的对象到当前的状态中。")]),e._v(" "),n("p",[e._v("例如，你的状态可能包含几个独立的变量：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      comments: []\n    };\n  }\n\n")])])]),n("p",[e._v("然后通过调用独立的 "),n("code",[e._v("setState()")]),e._v(" 调用分别更新它们:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  componentDidMount() {\n    fetchPosts().then(response => {\n      this.setState({\n        posts: response.posts\n      });\n    });\n\n    fetchComments().then(response => {\n      this.setState({\n        comments: response.comments\n      });\n    });\n  }\n\n")])])]),n("p",[e._v("合并是浅合并，所以 "),n("code",[e._v("this.setState({comments})")]),e._v(" 不会改变 "),n("code",[e._v("this.state.posts")]),e._v(" 的值，但会完全替换"),n("code",[e._v("this.state.comments")]),e._v(" 的值。")]),e._v(" "),n("h2",{attrs:{id:"数据向下流动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据向下流动"}},[e._v("#")]),e._v(" 数据向下流动")]),e._v(" "),n("p",[e._v("无论作为父组件还是子组件，它都无法获悉一个组件是否有状态，同时也不需要关心另一个组件是定义为函数组件还是类组件。")]),e._v(" "),n("p",[e._v("这就是 state(状态) 经常被称为 本地状态 或 封装状态的原因。 它不能被拥有并设置它的组件 以外的任何组件访问。")]),e._v(" "),n("p",[e._v("一个组件可以选择将 state(状态) 向下传递，作为其子组件的 props(属性)：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n\n")])])]),n("p",[e._v("同样适用于用户定义组件:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<FormattedDate date={this.state.date} />\n\n")])])]),n("p",[n("code",[e._v("FormattedDate")]),e._v(" 组件通过 props(属性) 接收了 "),n("code",[e._v("date")]),e._v(" 的值，但它仍然不能获知该值是来自于"),n("code",[e._v("Clock")]),e._v("的 state(状态) ，还是 "),n("code",[e._v("Clock")]),e._v(" 的 props(属性)，或者是直接手动创建的：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function FormattedDate(props) {\n  return <h2>It is {props.date.toLocaleTimeString()}.</h2>;\n}\n\n")])])]),n("p",[n("a",{attrs:{href:"http://codepen.io/gaearon/pen/zKRqNB?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("这通常称为一个“从上到下”，或者“单向”的数据流。任何 state(状态) 始终由某个特定组件所有，并且从该 state(状态) 导出的任何数据 或 UI 只能影响树中 “下方” 的组件。")]),e._v(" "),n("p",[e._v("如果把组件树想像为 props(属性) 的瀑布，所有组件的 state(状态) 就如同一个额外的水源汇入主流，且只能随着主流的方向向下流动。")]),e._v(" "),n("p",[e._v("要证明所有组件都是完全独立的， 我们可以创建一个 "),n("code",[e._v("App")]),e._v(" 组件，并在其中渲染 3 个``:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function App() {\n  return (\n    <div>\n      <Clock />\n      <Clock />\n      <Clock />\n    </div>\n  );\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n")])])]),n("p",[n("a",{attrs:{href:"http://codepen.io/gaearon/pen/vXdGmd?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("每个 "),n("code",[e._v("Clock")]),e._v(" 都设置它自己的计时器并独立更新。")]),e._v(" "),n("p",[e._v("在 React 应用中，一个组件是否是有状态或者无状态的，被认为是组件的一个实现细节，随着时间推移可能发生改变。你可以在有状态的组件中使用无状态组件，反之亦然。")]),e._v(" "),n("p",[e._v("通过 React 元素处理事件跟在 DOM 元素上处理事件非常相似。但是有一些语法上的区别：")]),e._v(" "),n("ul",[n("li",[e._v("React 事件使用驼峰命名，而不是全部小写。")]),e._v(" "),n("li",[e._v("通过 JSX , 你传递一个函数作为事件处理程序，而不是一个字符串。")])]),e._v(" "),n("p",[e._v("例如，HTML：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<button onclick="activateLasers()">\n  Activate Lasers\n</button>\n\n')])])]),n("p",[e._v("在 React 中略有不同：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<button onClick={activateLasers}>\n  Activate Lasers\n</button>\n\n")])])]),n("p",[e._v("另一个区别是，在 React 中你不能通过返回 "),n("code",[e._v("false")]),e._v("（愚人码头注：即 "),n("code",[e._v("return false;")]),e._v(" 语句） 来阻止默认行为。必须明确调用 "),n("code",[e._v("preventDefault")]),e._v(" 。例如，对于纯 HTML ，要阻止链接打开一个新页面的默认行为，可以这样写：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<a href="#" onclick="console.log(\'The link was clicked.\'); return false">\n  Click me\n</a>\n\n')])])]),n("p",[e._v("在 React 中, 应该这么写:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function ActionLink() {\n  function handleClick(e) {\n    e.preventDefault();\n    console.log('The link was clicked.');\n  }\n\n  return (\n    <a href=\"#\" onClick={handleClick}>\n      Click me\n    </a>\n  );\n}\n\n")])])]),n("p",[e._v("这里， e 是一个合成的事件。 React 根据 "),n("a",{attrs:{href:"https://www.w3.org/TR/DOM-Level-3-Events/",target:"_blank",rel:"noopener noreferrer"}},[e._v("W3C 规范"),n("OutboundLink")],1),e._v(" 定义了这个合成事件，所以你不需要担心跨浏览器的兼容性问题。查看 "),n("a",{attrs:{href:"http://www.css88.com/react/docs/events.html",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("SyntheticEvent")]),n("OutboundLink")],1),e._v(" 参考指南了解更多。")]),e._v(" "),n("p",[e._v("当使用 React 时，你一般不需要调用 "),n("code",[e._v("addEventListener")]),e._v(" 在 DOM 元素被创建后添加事件监听器。相反，只要当元素被初始渲染的时候提供一个监听器就可以了。")]),e._v(" "),n("p",[e._v("当使用一个 "),n("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes",target:"_blank",rel:"noopener noreferrer"}},[e._v("ES6 类"),n("OutboundLink")],1),e._v(" 定义一个组件时，通常的一个事件处理程序是类上的一个方法。例如，"),n("code",[e._v("Toggle")]),e._v(' 组件渲染一个按钮，让用户在 “ON” 和 "OFF" 状态之间切换：')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {isToggleOn: true};\n\n    // 这个绑定是必要的，使`this`在回调中起作用\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState(prevState => ({\n      isToggleOn: !prevState.isToggleOn\n    }));\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        {this.state.isToggleOn ? 'ON' : 'OFF'}\n      </button>\n    );\n  }\n}\n\nReactDOM.render(\n  <Toggle />,\n  document.getElementById('root')\n);\n\n")])])]),n("p",[n("a",{attrs:{href:"http://codepen.io/gaearon/pen/xEmzGg?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("在JSX回调中你必须注意 "),n("code",[e._v("this")]),e._v(" 的指向。 在 JavaScript 中，类方法默认没有 "),n("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind",target:"_blank",rel:"noopener noreferrer"}},[e._v("绑定"),n("OutboundLink")],1),e._v(" 的。如果你忘记绑定 "),n("code",[e._v("this.handleClick")]),e._v(" 并将其传递给"),n("code",[e._v("onClick")]),e._v("，那么在直接调用该函数时，"),n("code",[e._v("this")]),e._v(" 会是"),n("code",[e._v("undefined")]),e._v(" 。")]),e._v(" "),n("p",[e._v("这不是 React 特有的行为；这是 "),n("a",{attrs:{href:"https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript 中的函数如何工作"),n("OutboundLink")],1),e._v("的一部分。 一般情况下，如果你引用一个后面没跟 "),n("code",[e._v("()")]),e._v(" 的方法，例如 "),n("code",[e._v("onClick={this.handleClick}")]),e._v(" ，那你就应该 绑定(bind) 该方法。")]),e._v(" "),n("p",[e._v("如果调用 "),n("code",[e._v("bind")]),e._v(" 令你烦恼，有两种方法可以解决这个问题。 如果您使用实验性的 "),n("a",{attrs:{href:"https://babeljs.io/docs/plugins/transform-class-properties/",target:"_blank",rel:"noopener noreferrer"}},[e._v("属性初始化语法"),n("OutboundLink")],1),e._v(" ，那么你可以使用属性初始值设置来正确地 绑定(bind) 回调：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class LoggingButton extends React.Component {\n  // 这个语法确保 `this` 绑定在 handleClick 中。\n  // 警告：这是 *实验性的* 语法。\n  handleClick = () => {\n    console.log('this is:', this);\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        Click me\n      </button>\n    );\n  }\n}\n\n")])])]),n("p",[e._v("这个语法在 "),n("a",{attrs:{href:"https://github.com/facebookincubator/create-react-app",target:"_blank",rel:"noopener noreferrer"}},[e._v("创建 React App"),n("OutboundLink")],1),e._v(" 中是默认开启的。")]),e._v(" "),n("p",[e._v("如果你没有使用属性初始化语法，可以在回调中使用一个 "),n("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions",target:"_blank",rel:"noopener noreferrer"}},[e._v("箭头函数"),n("OutboundLink")],1),e._v("：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class LoggingButton extends React.Component {\n  handleClick() {\n    console.log('this is:', this);\n  }\n\n  render() {\n    // 这个语法确保 `this` 被绑定在 handleClick 中\n    return (\n      <button onClick={(e) => this.handleClick(e)}>\n        Click me\n      </button>\n    );\n  }\n}\n\n")])])]),n("p",[e._v("这个语法的问题是，每次 "),n("code",[e._v("LoggingButton")]),e._v(" 渲染时都创建一个不同的回调。在多数情况下，没什么问题。然而，如果这个回调被作为 prop(属性) 传递给下级组件，这些组件可能需要额外的重复渲染。我们通常建议在构造函数中进行绑定，以避免这类性能问题。")]),e._v(" "),n("h1",{attrs:{id:"条件渲染"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#条件渲染"}},[e._v("#")]),e._v(" 条件渲染")]),e._v(" "),n("p",[e._v("在 React 中，你可以创建不同的组件封装你所需要的行为。然后，只渲染它们之中的一些，取决于你的应用的状态。")]),e._v(" "),n("p",[e._v("React 中的条件渲染就和在 JavaScript 中的条件语句一样。使用 JavaScript 操作符如 "),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("if")]),n("OutboundLink")],1),e._v(" 或者"),n("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator",target:"_blank",rel:"noopener noreferrer"}},[e._v("条件操作符"),n("OutboundLink")],1),e._v("来创建渲染当前状态的元素，并且让 React 更新匹配的 UI 。")]),e._v(" "),n("p",[e._v("思考以下两个组件：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function UserGreeting(props) {\n  return <h1>Welcome back!</h1>;\n}\n\nfunction GuestGreeting(props) {\n  return <h1>Please sign up.</h1>;\n}\n\n")])])]),n("p",[e._v("我们需要创建一个 "),n("code",[e._v("Greeting")]),e._v(" 组件, 用来根据用户是否登录, 判断并显示上述两个组件之一：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Greeting(props) {\n  const isLoggedIn = props.isLoggedIn;\n  if (isLoggedIn) {\n    return <UserGreeting />;\n  }\n  return <GuestGreeting />;\n}\n\nReactDOM.render(\n  // 修改为 isLoggedIn={true} 试试:\n  <Greeting isLoggedIn={false} />,\n  document.getElementById('root')\n);\n\n")])])]),n("p",[n("a",{attrs:{href:"https://codepen.io/gaearon/pen/ZpVxNq?editors=0011",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("这个例子根据 "),n("code",[e._v("isLoggedIn")]),e._v(" prop 渲染了不同的问候语 。")]),e._v(" "),n("h3",{attrs:{id:"元素变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#元素变量"}},[e._v("#")]),e._v(" 元素变量")]),e._v(" "),n("p",[e._v("你可以用变量来存储元素。这可以帮助您有条件地渲染组件的一部分，而输出的其余部分不会更改。")]),e._v(" "),n("p",[e._v("思考以下两个新组件，分别用于显示登出和登入按钮：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function LoginButton(props) {\n  return (\n    <button onClick={props.onClick}>\n      Login\n    </button>\n  );\n}\n\nfunction LogoutButton(props) {\n  return (\n    <button onClick={props.onClick}>\n      Logout\n    </button>\n  );\n}\n\n")])])]),n("p",[e._v("在接下来的例子中，我们将会创建一个"),n("a",{attrs:{href:"http://www.css88.com/react/docs/state-and-lifecycle.html#adding-local-state-to-a-class",target:"_blank",rel:"noopener noreferrer"}},[e._v("有状态组件"),n("OutboundLink")],1),e._v("，叫做 "),n("code",[e._v("LoginControl")]),e._v(" 。")]),e._v(" "),n("p",[e._v("它将渲染 "),n("code",[e._v("或者")]),e._v(" ，取决于当前状态。同时渲染前面提到的`` 组件:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class LoginControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleLoginClick = this.handleLoginClick.bind(this);\n    this.handleLogoutClick = this.handleLogoutClick.bind(this);\n    this.state = {isLoggedIn: false};\n  }\n\n  handleLoginClick() {\n    this.setState({isLoggedIn: true});\n  }\n\n  handleLogoutClick() {\n    this.setState({isLoggedIn: false});\n  }\n\n  render() {\n    const isLoggedIn = this.state.isLoggedIn;\n\n    let button = null;\n    if (isLoggedIn) {\n      button = <LogoutButton onClick={this.handleLogoutClick} />;\n    } else {\n      button = <LoginButton onClick={this.handleLoginClick} />;\n    }\n\n    return (\n      <div>\n        <Greeting isLoggedIn={isLoggedIn} />\n        {button}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <LoginControl />,\n  document.getElementById('root')\n);\n\n")])])]),n("p",[n("a",{attrs:{href:"https://codepen.io/gaearon/pen/QKzAgB?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("虽然声明一个变量并使用一个 "),n("code",[e._v("if")]),e._v(" 语句是一个有条件地渲染组件的好方法，有时你可能想要使用一个更简短的语法。在 JSX 中有几种内联条件的方法，如下所述。")]),e._v(" "),n("h3",{attrs:{id:"使用逻辑-操作符的内联-if-用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用逻辑-操作符的内联-if-用法"}},[e._v("#")]),e._v(" 使用逻辑 && 操作符的内联 if 用法")]),e._v(" "),n("p",[e._v("您可以 "),n("a",{attrs:{href:"http://www.css88.com/react/docs/introducing-jsx.html#embedding-expressions-in-jsx",target:"_blank",rel:"noopener noreferrer"}},[e._v("在JSX中嵌入任何表达式"),n("OutboundLink")],1),e._v(" ，方法是将其包裹在花括号中。这也包括 JavaScript 逻辑"),n("code",[e._v("&&")]),e._v(" 运算符。 它有助于有条件地包含一个元素：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Mailbox(props) {\n  const unreadMessages = props.unreadMessages;\n  return (\n    <div>\n      <h1>Hello!</h1>\n      {unreadMessages.length > 0 &&\n        <h2>\n          You have {unreadMessages.length} unread messages.\n        </h2>\n      }\n    </div>\n  );\n}\n\nconst messages = ['React', 'Re: React', 'Re:Re: React'];\nReactDOM.render(\n  <Mailbox unreadMessages={messages} />,\n  document.getElementById('root')\n);\n\n")])])]),n("p",[n("a",{attrs:{href:"https://codepen.io/gaearon/pen/ozJddz?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("它可以正常运行，因为在 JavaScript 中， "),n("code",[e._v("true && expression")]),e._v(" 总是会评估为 "),n("code",[e._v("expression")]),e._v(" ，而"),n("code",[e._v("false && expression")]),e._v(" 总是执行为 "),n("code",[e._v("false")]),e._v(" 。")]),e._v(" "),n("p",[e._v("因此，如果条件为 "),n("code",[e._v("true")]),e._v(" ，则 "),n("code",[e._v("&&")]),e._v(" 后面的元素将显示在输出中。 如果是 "),n("code",[e._v("false")]),e._v("，React 将会忽略并跳过它。")]),e._v(" "),n("h3",{attrs:{id:"使用条件操作符的内联-if-else"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用条件操作符的内联-if-else"}},[e._v("#")]),e._v(" 使用条件操作符的内联 If-Else")]),e._v(" "),n("p",[e._v("另一个用于条件渲染元素的内联方法是使用 JavaScript 的条件操作符 "),n("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("condition ? true : false")]),n("OutboundLink")],1),e._v(" 。")]),e._v(" "),n("p",[e._v("在下面这个例子中，我们使用它来进行条件渲染一个小的文本块：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("render() {\n  const isLoggedIn = this.state.isLoggedIn;\n  return (\n    <div>\n      The user is <b>{isLoggedIn ? 'currently' : 'not'}</b> logged in.\n    </div>\n  );\n}\n\n")])])]),n("p",[e._v("它也可以用于更大的表达式，虽然不太明显发生了什么：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("render() {\n  const isLoggedIn = this.state.isLoggedIn;\n  return (\n    <div>\n      {isLoggedIn ? (\n        <LogoutButton onClick={this.handleLogoutClick} />\n      ) : (\n        <LoginButton onClick={this.handleLoginClick} />\n      )}\n    </div>\n  );\n}\n\n")])])]),n("p",[e._v("就像JavaScript一样，你可以根据你和你的团队认为更易于阅读的方式选择合适的风格。还要记住，无论何时何地，当条件变得太复杂时，可能是"),n("a",{attrs:{href:"http://www.css88.com/react/docs/components-and-props.html#extracting-components",target:"_blank",rel:"noopener noreferrer"}},[e._v("提取组件"),n("OutboundLink")],1),e._v("的好时机。")]),e._v(" "),n("h3",{attrs:{id:"防止组件渲染"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#防止组件渲染"}},[e._v("#")]),e._v(" 防止组件渲染")]),e._v(" "),n("p",[e._v("在极少数情况下，您可能希望组件隐藏自身，即使它是由另一个组件渲染的。为此，返回"),n("code",[e._v("null")]),e._v(" 而不是其渲染输出。")]),e._v(" "),n("p",[e._v("在下面的例子中，根据名为"),n("code",[e._v("warn")]),e._v("的 prop 值，呈现 `` 。如果 prop 值为 "),n("code",[e._v("false")]),e._v("，则该组件不渲染：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function WarningBanner(props) {\n  if (!props.warn) {\n    return null;\n  }\n\n  return (\n    <div className=\"warning\">\n      Warning!\n    </div>\n  );\n}\n\nclass Page extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {showWarning: true}\n    this.handleToggleClick = this.handleToggleClick.bind(this);\n  }\n\n  handleToggleClick() {\n    this.setState(prevState => ({\n      showWarning: !prevState.showWarning\n    }));\n  }\n\n  render() {\n    return (\n      <div>\n        <WarningBanner warn={this.state.showWarning} />\n        <button onClick={this.handleToggleClick}>\n          {this.state.showWarning ? 'Hide' : 'Show'}\n        </button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Page />,\n  document.getElementById('root')\n);\n\n")])])]),n("p",[n("a",{attrs:{href:"https://codepen.io/gaearon/pen/Xjoqwm?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("从组件的 "),n("code",[e._v("render")]),e._v(" 方法返回 "),n("code",[e._v("null")]),e._v(" 不会影响组件生命周期方法的触发。 例如，"),n("code",[e._v("componentWillUpdate")]),e._v(" 和 "),n("code",[e._v("componentDidUpdate")]),e._v(" 仍将被调用。")]),e._v(" "),n("h1",{attrs:{id:"列表-lists-和-键-keys"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#列表-lists-和-键-keys"}},[e._v("#")]),e._v(" 列表(Lists) 和 键(Keys)")]),e._v(" "),n("p",[e._v("首先，让我们回顾一下在 JavaScript 中如何转换列表。")]),e._v(" "),n("p",[e._v("给定下面的代码，我们使用 "),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("map()")]),n("OutboundLink")],1),e._v(" 函数使 "),n("code",[e._v("numbers")]),e._v(" 数组中的元素值翻倍。我们将 "),n("code",[e._v("map()")]),e._v(" 返回的新数组分配给变量 "),n("code",[e._v("doubled")]),e._v("，并且打印这个它：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const numbers = [1, 2, 3, 4, 5];\nconst doubled = numbers.map((number) => number * 2);\nconsole.log(doubled);\n\n")])])]),n("p",[e._v("这段代码在控制台中打印为 "),n("code",[e._v("[2, 4, 6, 8, 10]")]),e._v("。")]),e._v(" "),n("p",[e._v("在 React 中，转换数组为 "),n("a",{attrs:{href:"http://www.css88.com/react/docs/rendering-elements.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("元素列表"),n("OutboundLink")],1),e._v(" 的方式，和上述方法基本相同。")]),e._v(" "),n("h3",{attrs:{id:"多组件渲染"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多组件渲染"}},[e._v("#")]),e._v(" 多组件渲染")]),e._v(" "),n("p",[e._v("可以创建元素集合，并用一对大括号 "),n("code",[e._v("{}")]),e._v(" "),n("a",{attrs:{href:"http://www.css88.com/react/docs/introducing-jsx.html#embedding-expressions-in-jsx",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 JSX 中直接将其引用"),n("OutboundLink")],1),e._v("即可。")]),e._v(" "),n("p",[e._v("下面，我们用 JavaScript 的 "),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("map()")]),n("OutboundLink")],1),e._v(" 函数将 "),n("code",[e._v("numbers")]),e._v(" 数组循环处理。对于每一项，我们返回一个 `` 元素。最终，我们将结果元素数组分配给 "),n("code",[e._v("listItems")]),e._v("：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const numbers = [1, 2, 3, 4, 5];\nconst listItems = numbers.map((number) =>\n  <li>{number}</li>\n);\n\n")])])]),n("p",[e._v("把整个 "),n("code",[e._v("listItems")]),e._v(" 数组包含到一个 `` 元素，并"),n("a",{attrs:{href:"http://www.css88.com/react/docs/rendering-elements.html#rendering-an-element-into-the-dom",target:"_blank",rel:"noopener noreferrer"}},[e._v("渲染到 DOM"),n("OutboundLink")],1),e._v("：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ReactDOM.render(\n  <ul>{listItems}</ul>,\n  document.getElementById('root')\n);\n\n")])])]),n("p",[n("a",{attrs:{href:"https://codepen.io/gaearon/pen/GjPyQr?editors=0011",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("这段代码显示从 1 到 5 的数字列表。")]),e._v(" "),n("h3",{attrs:{id:"基本列表组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本列表组件"}},[e._v("#")]),e._v(" 基本列表组件")]),e._v(" "),n("p",[e._v("通常情况下，我们会在一个"),n("a",{attrs:{href:"http://www.css88.com/react/docs/components-and-props.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("组件"),n("OutboundLink")],1),e._v("中渲染列表。")]),e._v(" "),n("p",[e._v("我们可以重构前面的例子到一个组件，它接受一个 "),n("code",[e._v("numbers")]),e._v(" 数组，并输出一个元素的无序列表。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    <li>{number}</li>\n  );\n  return (\n    <ul>{listItems}</ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n\n")])])]),n("p",[e._v("当运行上述代码的时候，将会收到一个警告：a key should be provided for list items（应该为列表元素提供一个键）（愚人码头注 ：CodeOpen 中没有报警告，是因为其示例中使用的是 min 版本的 React，换成非 min 版本的就可以看到）。当创建元素列表时，“key” 是一个你需要包含的特殊字符串属性。我们将在下一节讨论它的重要性。")]),e._v(" "),n("p",[e._v("我们在 "),n("code",[e._v("numbers.map()")]),e._v(" 中赋值一个 "),n("code",[e._v("key")]),e._v(" 给我们的列表元素，解决丢失 key 的问题。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    <li key={number.toString()}>\n      {number}\n    </li>\n  );\n  return (\n    <ul>{listItems}</ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n\n")])])]),n("p",[n("a",{attrs:{href:"https://codepen.io/gaearon/pen/jrXYRR?editors=0011",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("h2",{attrs:{id:"键-keys"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#键-keys"}},[e._v("#")]),e._v(" 键(Keys)")]),e._v(" "),n("p",[e._v("键(Keys) 帮助 React 标识哪个项被修改、添加或者移除了。数组中的每一个元素都应该有一个唯一不变的键(Keys)来标识：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const numbers = [1, 2, 3, 4, 5];\nconst listItems = numbers.map((number) =>\n  <li key={number.toString()}>\n    {number}\n  </li>\n);\n\n")])])]),n("p",[e._v("挑选 key 最好的方式是使用一个在它的同辈元素中不重复的标识字符串。多数情况你可以使用数据中的 IDs 作为 keys：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const todoItems = todos.map((todo) =>\n  <li key={todo.id}>\n    {todo.text}\n  </li>\n);\n\n")])])]),n("p",[e._v("当要渲染的列表项中没有稳定的 IDs 时，你可以使用数据项的索引值作为 key 的最后选择：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const todoItems = todos.map((todo, index) =>\n  // Only do this if items have no stable IDs\n  <li key={index}>\n    {todo.text}\n  </li>\n);\n\n")])])]),n("p",[e._v("如果列表项可能被重新排序时，我们不建议使用索引作为 keys，因为这导致一定的性能问题，会很慢。如果感兴趣，你可以阅读一下"),n("a",{attrs:{href:"http://www.css88.com/react/docs/reconciliation.html#recursing-on-children",target:"_blank",rel:"noopener noreferrer"}},[e._v("深入的介绍关于为什么 keys 是必须的"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("h3",{attrs:{id:"使用-keys-提取组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-keys-提取组件"}},[e._v("#")]),e._v(" 使用 keys 提取组件")]),e._v(" "),n("p",[e._v("keys 只在数组的上下文中存在意义。")]),e._v(" "),n("p",[e._v("例如，如果你"),n("a",{attrs:{href:"http://www.css88.com/react/docs/components-and-props.html#extracting-components",target:"_blank",rel:"noopener noreferrer"}},[e._v("提取"),n("OutboundLink")],1),e._v(" 一个 "),n("code",[e._v("ListItem")]),e._v(" 组件，应该把 key 放置在数组处理的 "),n("code",[e._v("元素中，不能放在 `ListItem` 组件自身中的")]),e._v(" 根元素上。")]),e._v(" "),n("p",[n("strong",[e._v("例子：错误的 key 用法")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function ListItem(props) {\n  const value = props.value;\n  return (\n    // 错误！不需要在这里指定 key：\n    <li key={value.toString()}>\n      {value}\n    </li>\n  );\n}\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    // 错误！key 应该在这里指定：\n    <ListItem value={number} />\n  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n\n")])])]),n("p",[n("strong",[e._v("错误！key 应该在这里指定：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function ListItem(props) {\n  // 正确！这里不需要指定 key ：\n  return <li>{props.value}</li>;\n}\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    // 正确！key 应该在这里被指定\n    <ListItem key={number.toString()}\n              value={number} />\n  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n\n")])])]),n("p",[n("a",{attrs:{href:"https://codepen.io/rthor/pen/QKzJKG?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("一个好的经验准则是元素中调用 "),n("code",[e._v("map()")]),e._v(" 需要 keys 。")]),e._v(" "),n("h3",{attrs:{id:"keys-在同辈元素中必须是唯一的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#keys-在同辈元素中必须是唯一的"}},[e._v("#")]),e._v(" keys 在同辈元素中必须是唯一的")]),e._v(" "),n("p",[e._v("在数组中使用的 keys 必须在它们的同辈之间唯一。然而它们并不需要全局唯一。我们可以在操作两个不同数组的时候使用相同的 keys ：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Blog(props) {\n  const sidebar = (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={post.id}>\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n  const content = props.posts.map((post) =>\n    <div key={post.id}>\n      <h3>{post.title}</h3>\n      <p>{post.content}</p>\n    </div>\n  );\n  return (\n    <div>\n      {sidebar}\n      <hr />\n      {content}\n    </div>\n  );\n}\n\nconst posts = [\n  {id: 1, title: 'Hello World', content: 'Welcome to learning React!'},\n  {id: 2, title: 'Installation', content: 'You can install React from npm.'}\n];\nReactDOM.render(\n  <Blog posts={posts} />,\n  document.getElementById('root')\n);\n\n")])])]),n("p",[n("a",{attrs:{href:"https://codepen.io/gaearon/pen/NRZYGN?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("键是React的一个内部映射，但其不会传递给组件的内部。如果你需要在组件中使用相同的值，可以明确使用一个不同名字的 prop 传入。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const content = posts.map((post) =>\n  <Post\n    key={post.id}\n    id={post.id}\n    title={post.title} />\n);\n\n")])])]),n("p",[e._v("上面的例子中， "),n("code",[e._v("Post")]),e._v(" 组件可以读取 "),n("code",[e._v("props.id")]),e._v("，但是不能读取 "),n("code",[e._v("props.key")]),e._v(" 。")]),e._v(" "),n("h3",{attrs:{id:"在-jsx-中嵌入-map"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在-jsx-中嵌入-map"}},[e._v("#")]),e._v(" 在 JSX 中嵌入 map()")]),e._v(" "),n("p",[e._v("在上面的例子中，我们单独声明了一个 "),n("code",[e._v("listItems")]),e._v(" 变量，并在 JSX 中引用了该变量：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    <ListItem key={number.toString()}\n              value={number} />\n  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n\n")])])]),n("p",[e._v("JSX允许在大括号中"),n("a",{attrs:{href:"http://www.css88.com/react/docs/introducing-jsx.html#embedding-expressions-in-jsx",target:"_blank",rel:"noopener noreferrer"}},[e._v("嵌入任何表达式"),n("OutboundLink")],1),e._v("，因此可以 内联 "),n("code",[e._v("map()")]),e._v(" 结果：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function NumberList(props) {\n  const numbers = props.numbers;\n  return (\n    <ul>\n      {numbers.map((number) =>\n        <ListItem key={number.toString()}\n                  value={number} />\n      )}\n    </ul>\n  );\n}\n\n")])])]),n("p",[n("a",{attrs:{href:"https://codepen.io/gaearon/pen/BLvYrB?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("有时这可以产生清晰的代码，但是这个风格也可能被滥用。就像在 JavaScript 中，是否有必要提取一个变量以提高程序的可读性，这取决于你。但是记住，如果 "),n("code",[e._v("map()")]),e._v(" 体中有太多嵌套，可能是"),n("a",{attrs:{href:"http://www.css88.com/react/docs/components-and-props.html#extracting-components",target:"_blank",rel:"noopener noreferrer"}},[e._v("提取组件"),n("OutboundLink")],1),e._v("的好时机。")]),e._v(" "),n("h1",{attrs:{id:"表单-forms"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#表单-forms"}},[e._v("#")]),e._v(" 表单(Forms)")]),e._v(" "),n("p",[e._v("HTML 表单元素与 React 中的其他 DOM 元素有所不同，因为表单元素自然地保留了一些内部状态。例如，这个纯 HTML 表单接受一个单独的 name：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<form>\n  <label>\n    Name:\n    <input type="text" name="name" />\n  </label>\n  <input type="submit" value="Submit" />\n</form>\n\n')])])]),n("p",[e._v("该表单和 HTML 表单的默认行为一致，当用户提交此表单时浏览器会打开一个新页面。如果你希望 React 中保持这个行为，也可以工作。但是多数情况下，用一个处理表单提交并访问用户输入到表单中的数据的 JavaScript 函数也很方便。实现这一点的标准方法是使用一种称为“受控组件(controlled components)”的技术。")]),e._v(" "),n("h2",{attrs:{id:"受控组件-controlled-components"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#受控组件-controlled-components"}},[e._v("#")]),e._v(" 受控组件(Controlled Components)")]),e._v(" "),n("p",[e._v("在 HTML 中，表单元素如 "),n("code",[e._v("，")]),e._v(" 和 `` 表单元素通常保持自己的状态，并根据用户输入进行更新。而在 React 中，可变状态一般保存在组件的 state(状态) 属性中，并且只能通过 "),n("a",{attrs:{href:"http://www.css88.com/react/docs/react-component.html#setstate",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("setState()")]),n("OutboundLink")],1),e._v(" 更新。")]),e._v(" "),n("p",[e._v("我们可以通过使 React 的 state 成为 “单一数据源原则” 来结合这两个形式。然后渲染表单的 React 组件也可以控制在用户输入之后的行为。这种形式，其值由 React 控制的输入表单元素称为“受控组件”。")]),e._v(" "),n("p",[e._v("例如，如果我们想使上一个例子在提交时记录名称，我们可以将表单写为受控组件：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('class NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: \'\'};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    alert(\'A name was submitted: \' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type="text" value={this.state.value} onChange={this.handleChange} />\n        </label>\n        <input type="submit" value="Submit" />\n      </form>\n    );\n  }\n}\n\n')])])]),n("p",[n("a",{attrs:{href:"https://codepen.io/gaearon/pen/VmmPgp?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("设置表单元素的value属性之后，其显示值将由this.state.value决定，以满足React状态的同一数据理念。每次键盘敲击之后会执行handleChange方法以更新React状态，显示值也将随着用户的输入改变。")]),e._v(" "),n("p",[e._v("由于 "),n("code",[e._v("value")]),e._v(" 属性设置在我们的表单元素上，显示的值总是 "),n("code",[e._v("this.state.value")]),e._v("，以满足 state 状态的同一数据理念。由于 "),n("code",[e._v("handleChange")]),e._v(" 在每次敲击键盘时运行，以更新 React state(状态)，显示的值将更新为用户的输入。")]),e._v(" "),n("p",[e._v("对于受控组件来说，每一次 state(状态) 变化都会伴有相关联的处理函数。这使得可以直接修改或验证用户的输入。比如，如果我们希望强制 name 的输入都是大写字母，可以这样来写"),n("code",[e._v("handleChange")]),e._v(" 方法：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("handleChange(event) {\n  this.setState({value: event.target.value.toUpperCase()});\n}\n\n")])])]),n("h2",{attrs:{id:"textare-标签"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#textare-标签"}},[e._v("#")]),e._v(" textare 标签")]),e._v(" "),n("p",[e._v("在 HTML 中，`` 元素通过它的子节点定义了它的文本值：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<textarea>\n  Hello there, this is some text in a text area\n</textarea>\n\n")])])]),n("p",[e._v("在 React 中，"),n("code",[e._v("的赋值使用 `value` 属性替代。这样一来，表单中")]),e._v(" 的书写方式接近于单行文本输入框 ：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class EssayForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 'Please write an essay about your favorite DOM element.'\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    alert('An essay was submitted: ' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <textarea value={this.state.value} onChange={this.handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n\n")])])]),n("p",[e._v("注意，"),n("code",[e._v("this.state.value")]),e._v(" 在构造函数中初始化，所以这些文本一开始就出现在文本域中。")]),e._v(" "),n("h2",{attrs:{id:"select-标签"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#select-标签"}},[e._v("#")]),e._v(" select 标签")]),e._v(" "),n("p",[e._v("在 HTML 中，`` 创建了一个下拉列表。例如，这段 HTML 创建一个下拉的口味(flavors)列表：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<select>\n  <option value="grapefruit">Grapefruit</option>\n  <option value="lime">Lime</option>\n  <option selected value="coconut">Coconut</option>\n  <option value="mango">Mango</option>\n</select>\n\n')])])]),n("p",[e._v("注意，Coconut 选项是初始化选中的，因为它的 "),n("code",[e._v("selected")]),e._v(" 属性。React 中，并不使用这个"),n("code",[e._v("selected")]),e._v(" 属性，而是在根 "),n("code",[e._v("select")]),e._v(" 标签中使用了一个 "),n("code",[e._v("value")]),e._v(" 属性。这使得受控组件使用更方便，因为你只需要更新一处即可。例如：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('class FlavorForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: \'coconut\'};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    alert(\'Your favorite flavor is: \' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Pick your favorite La Croix flavor:\n          <select value={this.state.value} onChange={this.handleChange}>\n            <option value="grapefruit">Grapefruit</option>\n            <option value="lime">Lime</option>\n            <option value="coconut">Coconut</option>\n            <option value="mango">Mango</option>\n          </select>\n        </label>\n        <input type="submit" value="Submit" />\n      </form>\n    );\n  }\n}\n\n')])])]),n("p",[n("a",{attrs:{href:"https://codepen.io/gaearon/pen/JbbEzX?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("总的来说，这使 "),n("code",[e._v("，")]),e._v(" 和 `` 都以类似的方式工作 —— 它们都接受一个 "),n("code",[e._v("value")]),e._v(" 属性可以用来实现一个受控组件。")]),e._v(" "),n("h2",{attrs:{id:"处理多个输入元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#处理多个输入元素"}},[e._v("#")]),e._v(" 处理多个输入元素")]),e._v(" "),n("p",[e._v("当您需要处理多个受控的 "),n("code",[e._v("input")]),e._v(" 元素时，您可以为每个元素添加一个 "),n("code",[e._v("name")]),e._v(" 属性，并且让处理函数根据 "),n("code",[e._v("event.target.name")]),e._v(" 的值来选择要做什么。")]),e._v(" "),n("p",[e._v("例如：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('class Reservation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isGoing: true,\n      numberOfGuests: 2\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.type === \'checkbox\' ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    return (\n      <form>\n        <label>\n          Is going:\n          <input\n            name="isGoing"\n            type="checkbox"\n            checked={this.state.isGoing}\n            onChange={this.handleInputChange} />\n        </label>\n        <br />\n        <label>\n          Number of guests:\n          <input\n            name="numberOfGuests"\n            type="number"\n            value={this.state.numberOfGuests}\n            onChange={this.handleInputChange} />\n        </label>\n      </form>\n    );\n  }\n}\n\n')])])]),n("p",[n("a",{attrs:{href:"https://codepen.io/gaearon/pen/wgedvV?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("注意我们如何使用ES6"),n("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names",target:"_blank",rel:"noopener noreferrer"}},[e._v("计算的属性名称"),n("OutboundLink")],1),e._v("语法来更新与给定输入名称相对应的 state(状态) 键：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("this.setState({\n  [name]: value\n});\n\n")])])]),n("p",[e._v("这段代码等价于 ES5 代码:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var partialState = {};\npartialState[name] = value;\nthis.setState(partialState);\n\n")])])]),n("p",[e._v("此外，由于 "),n("code",[e._v("setState()")]),e._v(" 自动"),n("a",{attrs:{href:"http://www.css88.com/react/docs/state-and-lifecycle.html#state-updates-are-merged",target:"_blank",rel:"noopener noreferrer"}},[e._v("将部分状态合并到当前状态"),n("OutboundLink")],1),e._v("，所以我们只需要调用更改的部分即可。")]),e._v(" "),n("h2",{attrs:{id:"受控组件的替代方案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#受控组件的替代方案"}},[e._v("#")]),e._v(" 受控组件的替代方案")]),e._v(" "),n("p",[e._v("有时使用受控组件有些乏味，因为你需要为每一个可更改的数据提供事件处理器，并通过 React 组件管理所有输入状态。当你将已经存在的代码转换为 React 时，或将 React 应用程序与非 React 库集成时，这可能变得特别烦人。在这些情况下，您可能需要使用"),n("a",{attrs:{href:"http://www.css88.com/react/docs/uncontrolled-components.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("不受控的组件"),n("OutboundLink")],1),e._v("，用于实现输入表单的替代技术。")]),e._v(" "),n("h1",{attrs:{id:"状态提升-lifting-state-up"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#状态提升-lifting-state-up"}},[e._v("#")]),e._v(" 状态提升(Lifting State Up)")]),e._v(" "),n("p",[e._v("通常情况下，同一个数据的变化需要几个不同的组件来反映。我们建议提升共享的状态到它们最近的祖先组件中。我们看下这是如何运作的。")]),e._v(" "),n("p",[e._v("在本节，我们将会创建一个温度计算器，用来计算水在一个给定温度下是否会沸腾。")]),e._v(" "),n("p",[e._v("我们通过一个称为 "),n("code",[e._v("BoilingVerdict")]),e._v(" 的组件开始。它接受 "),n("code",[e._v("celsius")]),e._v("（摄氏温度）作为 prop ，并打印是否足以使水沸腾：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function BoilingVerdict(props) {\n  if (props.celsius >= 100) {\n    return <p>The water would boil.</p>;\n  }\n  return <p>The water would not boil.</p>;\n}\n\n")])])]),n("p",[e._v("接下来，我们将会创建一个 "),n("code",[e._v("Calculator")]),e._v(" 组件。它渲染一个 `` 让你输入温度，并在"),n("code",[e._v("this.state.temperature")]),e._v(" 中保存它的值。")]),e._v(" "),n("p",[e._v("另外，它会根据当前输入的温度来渲染 "),n("code",[e._v("BoilingVerdict")]),e._v(" 。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {temperature: ''};\n  }\n\n  handleChange(e) {\n    this.setState({temperature: e.target.value});\n  }\n\n  render() {\n    const temperature = this.state.temperature;\n    return (\n      <fieldset>\n        <legend>Enter temperature in Celsius:</legend>\n        <input\n          value={temperature}\n          onChange={this.handleChange} />\n        <BoilingVerdict\n          celsius={parseFloat(temperature)} />\n      </fieldset>\n    );\n  }\n}\n\n")])])]),n("p",[n("a",{attrs:{href:"http://codepen.io/valscion/pen/VpZJRZ?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("h2",{attrs:{id:"添加第二个输入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#添加第二个输入"}},[e._v("#")]),e._v(" 添加第二个输入")]),e._v(" "),n("p",[e._v("我们新的需求是，除了一个摄氏温度输入之外，我们再提供了一个华氏温度输入，并且两者保持自动同步。")]),e._v(" "),n("p",[e._v("我们可以从 "),n("code",[e._v("Calculator")]),e._v(" 中提取一个 "),n("code",[e._v("TemperatureInput")]),e._v(" 组件开始。我们将添加一个新的 "),n("code",[e._v("scale")]),e._v("属性，值可能是 "),n("code",[e._v('"c"')]),e._v(" 或者 "),n("code",[e._v('"f"')]),e._v(" ：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const scaleNames = {\n  c: 'Celsius',\n  f: 'Fahrenheit'\n};\n\nclass TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {temperature: ''};\n  }\n\n  handleChange(e) {\n    this.setState({temperature: e.target.value});\n  }\n\n  render() {\n    const temperature = this.state.temperature;\n    const scale = this.props.scale;\n    return (\n      <fieldset>\n        <legend>Enter temperature in {scaleNames[scale]}:</legend>\n        <input value={temperature}\n               onChange={this.handleChange} />\n      </fieldset>\n    );\n  }\n}\n\n")])])]),n("p",[e._v("现在我们可以修改 "),n("code",[e._v("Calculator")]),e._v(" 来渲染两个独立的温度输入：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('class Calculator extends React.Component {\n  render() {\n    return (\n      <div>\n        <TemperatureInput scale="c" />\n        <TemperatureInput scale="f" />\n      </div>\n    );\n  }\n}\n\n')])])]),n("p",[n("a",{attrs:{href:"http://codepen.io/valscion/pen/GWKbao?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("我们现在有两个 (input)输入框 了，但是当你输入其中一个温度时，另一个输入并没有更新。这是跟我们的需要不符的：我们希望它们保持同步。")]),e._v(" "),n("p",[e._v("我们也不能在 "),n("code",[e._v("Calculator")]),e._v(" 中显示 "),n("code",[e._v("BoilingVerdict")]),e._v(" 。 "),n("code",[e._v("Calculator")]),e._v(" 不知道当前的温度，因为它是在 "),n("code",[e._v("TemperatureInput")]),e._v(" 中隐藏的。")]),e._v(" "),n("h2",{attrs:{id:"编写转换函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编写转换函数"}},[e._v("#")]),e._v(" 编写转换函数")]),e._v(" "),n("p",[e._v("首先，我们编写两个函数来在摄氏温度和华氏温度之间转换：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function toCelsius(fahrenheit) {\n  return (fahrenheit - 32) * 5 / 9;\n}\n\nfunction toFahrenheit(celsius) {\n  return (celsius * 9 / 5) + 32;\n}\n\n")])])]),n("p",[e._v("这两个函数用来转化数字。接下来再编写一个函数用来接收一个字符串 "),n("code",[e._v("temperature")]),e._v(" 和一个 转化器函数 作为参数，并返回一个字符串。这个函数用来在两个输入之间进行相互转换。")]),e._v(" "),n("p",[e._v("对于无效的 "),n("code",[e._v("temperature")]),e._v(" 值，它返回一个空字符串，输出结果保留3位小数：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function tryConvert(temperature, convert) {\n  const input = parseFloat(temperature);\n  if (Number.isNaN(input)) {\n    return '';\n  }\n  const output = convert(input);\n  const rounded = Math.round(output * 1000) / 1000;\n  return rounded.toString();\n}\n\n")])])]),n("p",[e._v("例如， "),n("code",[e._v("tryConvert('abc', toCelsius)")]),e._v(" 将返回一个空字符串，而 "),n("code",[e._v("tryConvert('10.22', toFahrenheit)")]),e._v(" 返回 "),n("code",[e._v("'50.396'")]),e._v(" 。")]),e._v(" "),n("h2",{attrs:{id:"状态提升-lifting-state-up-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#状态提升-lifting-state-up-2"}},[e._v("#")]),e._v(" 状态提升(Lifting State Up)")]),e._v(" "),n("p",[e._v("目前，两个 "),n("code",[e._v("TemperatureInput")]),e._v(" 组件都将其值保持在本地状态中：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {temperature: ''};\n  }\n\n  handleChange(e) {\n    this.setState({temperature: e.target.value});\n  }\n\n  render() {\n    const temperature = this.state.temperature;\n\n")])])]),n("p",[e._v("但是，我们希望这两个输入是相互同步的。当我们更新摄氏温度输入时，华氏温度输入应反映转换后的温度，反之亦然。")]),e._v(" "),n("p",[e._v("在 React 中，共享 state(状态) 是通过将其移动到需要它的组件的最接近的共同祖先组件来实现的。 这被称为“状态提升(Lifting State Up)”。我们将从 "),n("code",[e._v("TemperatureInput")]),e._v(" 中移除相关状态本地状态，并将其移动到 "),n("code",[e._v("Calculator")]),e._v(" 中。")]),e._v(" "),n("p",[e._v("如果 "),n("code",[e._v("Calculator")]),e._v(" 拥有共享状态，那么它将成为两个输入当前温度的“单一数据来源”。它可以指示他们具有彼此一致的值。由于两个 "),n("code",[e._v("TemperatureInput")]),e._v(" 组件的 props 都来自同一个父级"),n("code",[e._v("Calculator")]),e._v("组件，两个输入将始终保持同步。")]),e._v(" "),n("p",[e._v("让我们一步一步看看这是如何工作的。")]),e._v(" "),n("p",[e._v("首先，我们将在 "),n("code",[e._v("TemperatureInput")]),e._v(" 组件中用 "),n("code",[e._v("this.props.temperature")]),e._v(" 替换"),n("code",[e._v("this.state.temperature")]),e._v(" 。 现在，我们假装 "),n("code",[e._v("this.props.temperature")]),e._v(" 已经存在，虽然我们将来需要从 "),n("code",[e._v("Calculator")]),e._v(" 传递过来：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  render() {\n    // 之前是: const temperature = this.state.temperature;\n    const temperature = this.props.temperature;\n\n")])])]),n("p",[e._v("我们知道 "),n("a",{attrs:{href:"http://www.css88.com/react/docs/components-and-props.html#props-are-read-only",target:"_blank",rel:"noopener noreferrer"}},[e._v("props(属性) 是只读的"),n("OutboundLink")],1),e._v("。 当 "),n("code",[e._v("temperature")]),e._v(" 是 本地 state(状态)时， "),n("code",[e._v("TemperatureInput")]),e._v("可以调用 "),n("code",[e._v("this.setState()")]),e._v(" 来更改它。 然而，现在 "),n("code",[e._v("temperature")]),e._v(" 来自父级作为 prop(属性) ，"),n("code",[e._v("TemperatureInput")]),e._v(" 就无法控制它。")]),e._v(" "),n("p",[e._v("在 React 中，通常通过使组件“受控”的方式来解决。就像 DOM ``一样接受一个 "),n("code",[e._v("value")]),e._v("和一个 "),n("code",[e._v("onChange")]),e._v(" prop(属性) ，所以可以定制 "),n("code",[e._v("TemperatureInput")]),e._v(" 接受来自其父级 "),n("code",[e._v("Calculator")]),e._v(" 的"),n("code",[e._v("temperature")]),e._v(" 和 "),n("code",[e._v("onTemperatureChange")]),e._v(" 。")]),e._v(" "),n("p",[e._v("现在，当 "),n("code",[e._v("TemperatureInput")]),e._v(" 想要更新其温度时，它就会调用"),n("code",[e._v("this.props.onTemperatureChange")]),e._v("：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  handleChange(e) {\n    // 之前是: this.setState({temperature: e.target.value});\n    this.props.onTemperatureChange(e.target.value);\n\n")])])]),n("p",[e._v("请注意，自定义组件中的 "),n("code",[e._v("temperature")]),e._v(" 或 "),n("code",[e._v("onTemperatureChange")]),e._v(" prop(属性) 名称没有特殊的含义。我们可以命名为任何其他名称，像命名他们为 "),n("code",[e._v("value")]),e._v(" 和 "),n("code",[e._v("onChange")]),e._v("，是一个常见的惯例。")]),e._v(" "),n("p",[n("code",[e._v("onTemperatureChange")]),e._v(" prop(属性) 和 "),n("code",[e._v("temperature")]),e._v(" prop(属性) 一起由父级的 "),n("code",[e._v("Calculator")]),e._v(" 组件提供。它将通过修改自己的本地 state(状态) 来处理变更，从而通过新值重新渲染两个输入。我们将很快看到新的 "),n("code",[e._v("Calculator")]),e._v(" 实现。")]),e._v(" "),n("p",[e._v("在修改 "),n("code",[e._v("Calculator")]),e._v(" 之前，让我们回顾一下对 "),n("code",[e._v("TemperatureInput")]),e._v(" 组件的更改。我们已经从中删除了本地 state(状态) ，不是读取"),n("code",[e._v("this.state.temperature")]),e._v(" ，我们现在读取"),n("code",[e._v("this.props.temperature")]),e._v(" 。当我们想要更改时， 不是调用 "),n("code",[e._v("this.setState()")]),e._v(" ，而是调用"),n("code",[e._v("this.props.onTemperatureChange()")]),e._v("， 这将由 "),n("code",[e._v("Calculator")]),e._v(" 提供：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.onTemperatureChange(e.target.value);\n  }\n\n  render() {\n    const temperature = this.props.temperature;\n    const scale = this.props.scale;\n    return (\n      <fieldset>\n        <legend>Enter temperature in {scaleNames[scale]}:</legend>\n        <input value={temperature}\n               onChange={this.handleChange} />\n      </fieldset>\n    );\n  }\n}\n\n")])])]),n("p",[e._v("现在我们来看一下 "),n("code",[e._v("Calculator")]),e._v(" 组件。")]),e._v(" "),n("p",[e._v("我们将当前输入的 "),n("code",[e._v("temperature")]),e._v(" 和 "),n("code",[e._v("scale")]),e._v(" 存储在本地 state(状态) 中。这是我们从输入 “提升” 的 state(状态) ，它将作为两个输入的 “单一数据来源” 。为了渲染两个输入，我们需要知道的所有数据的最小表示。")]),e._v(" "),n("p",[e._v("例如，如果我们在摄氏度输入框中输入 37 ，则 "),n("code",[e._v("Calculator")]),e._v(" 组件的状态将是：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("{\n  temperature: '37',\n  scale: 'c'\n}\n\n")])])]),n("p",[e._v("如果我们稍后将华氏温度字段编辑为 212 ，则 "),n("code",[e._v("Calculator")]),e._v(" 组件的状态将是：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("{\n  temperature: '212',\n  scale: 'f'\n}\n\n")])])]),n("p",[e._v("我们可以存储两个输入框的值，但事实证明是不必要的。存储最近更改的输入框的值，以及它所表示的度量衡就够了。然后，我们可以基于当前的 "),n("code",[e._v("temperature")]),e._v("(温度) 和 "),n("code",[e._v("scale")]),e._v("(度量衡) 来推断其他输入的值。")]),e._v(" "),n("p",[e._v("输入框保持同步，因为它们的值是从相同的 state(状态) 计算出来的：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n    this.state = {temperature: '', scale: 'c'};\n  }\n\n  handleCelsiusChange(temperature) {\n    this.setState({scale: 'c', temperature});\n  }\n\n  handleFahrenheitChange(temperature) {\n    this.setState({scale: 'f', temperature});\n  }\n\n  render() {\n    const scale = this.state.scale;\n    const temperature = this.state.temperature;\n    const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\n    const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n\n    return (\n      <div>\n        <TemperatureInput\n          scale=\"c\"\n          temperature={celsius}\n          onTemperatureChange={this.handleCelsiusChange} />\n        <TemperatureInput\n          scale=\"f\"\n          temperature={fahrenheit}\n          onTemperatureChange={this.handleFahrenheitChange} />\n        <BoilingVerdict\n          celsius={parseFloat(celsius)} />\n      </div>\n    );\n  }\n}\n\n")])])]),n("p",[n("a",{attrs:{href:"http://codepen.io/valscion/pen/jBNjja?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("现在，无论你编辑哪个输入框，"),n("code",[e._v("Calculator")]),e._v(" 中的 "),n("code",[e._v("this.state.temperature")]),e._v(" 和 "),n("code",[e._v("this.state.scale")]),e._v("都会更新。其中一个输入框获取值，所以任何用户输入都被保留，并且另一个输入总是基于它重新计算值。")]),e._v(" "),n("p",[e._v("让我们回顾一下编辑输入时会发生什么：")]),e._v(" "),n("ul",[n("li",[e._v("React 调用在 DOM `` 上的 "),n("code",[e._v("onChange")]),e._v(" 指定的函数。在我们的例子中，这是"),n("code",[e._v("TemperatureInput")]),e._v(" 组件中的 "),n("code",[e._v("handleChange")]),e._v(" 方法。")]),e._v(" "),n("li",[n("code",[e._v("TemperatureInput")]),e._v(" 组件中的 "),n("code",[e._v("handleChange")]),e._v(" 方法使用 新的期望值 调用"),n("code",[e._v("this.props.onTemperatureChange()")]),e._v("。"),n("code",[e._v("TemperatureInput")]),e._v(" 组件中的 props(属性) ，包括"),n("code",[e._v("onTemperatureChange")]),e._v("，由其父组件 "),n("code",[e._v("Calculator")]),e._v(" 提供。")]),e._v(" "),n("li",[e._v("当它预先呈现时， "),n("code",[e._v("Calculator")]),e._v(" 指定了摄氏 "),n("code",[e._v("TemperatureInput")]),e._v(" 的 "),n("code",[e._v("onTemperatureChange")]),e._v(" 是"),n("code",[e._v("Calculator")]),e._v(" 的 "),n("code",[e._v("handleCelsiusChange")]),e._v(" 方法，并且华氏 "),n("code",[e._v("TemperatureInput")]),e._v(" 的"),n("code",[e._v("onTemperatureChange")]),e._v(" 是 "),n("code",[e._v("Calculator")]),e._v(" 的 "),n("code",[e._v("handleFahrenheitChange")]),e._v(" 方法。因此，会根据我们编辑的输入框，分别调用这两个 "),n("code",[e._v("Calculator")]),e._v(" 方法。")]),e._v(" "),n("li",[e._v("在这些方法中， "),n("code",[e._v("Calculator")]),e._v(" 组件要求 React 通过使用 新的输入值 和 刚刚编辑的输入框的当前度量衡 来调用 "),n("code",[e._v("this.setState()")]),e._v(" 来重新渲染自身。")]),e._v(" "),n("li",[e._v("React 调用 "),n("code",[e._v("Calculator")]),e._v(" 组件的 "),n("code",[e._v("render")]),e._v(" 方法来了解 UI 外观应该是什么样子。基于当前温度和激活的度量衡来重新计算两个输入框的值。这里进行温度转换。")]),e._v(" "),n("li",[e._v("React 使用 "),n("code",[e._v("Calculator")]),e._v(" 指定的新 props(属性) 调用各个 "),n("code",[e._v("TemperatureInput")]),e._v(" 组件的 "),n("code",[e._v("render")]),e._v("方法。 它了解 UI 外观应该是什么样子。")]),e._v(" "),n("li",[e._v("React DOM 更新 DOM 以匹配期望的输入值。我们刚刚编辑的输入框接收当前值，另一个输入框更新为转换后的温度。")])]),e._v(" "),n("p",[e._v("每个更新都会执行相同的步骤，以便输入保持同步。")]),e._v(" "),n("h2",{attrs:{id:"经验总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#经验总结"}},[e._v("#")]),e._v(" 经验总结")]),e._v(" "),n("p",[e._v("在一个 React 应用中，对于任何可变的数据都应该循序“单一数据源”原则。通常情况下，state 首先被添加到需要它进行渲染的组件。然后，如果其它的组件也需要它，你可以提升状态到它们最近的祖先组件。你应该依赖 "),n("a",{attrs:{href:"http://www.css88.com/react/docs/state-and-lifecycle.html#the-data-flows-down",target:"_blank",rel:"noopener noreferrer"}},[e._v("从上到下的数据流向"),n("OutboundLink")],1),e._v(" ，而不是试图在不同的组件中同步状态。")]),e._v(" "),n("p",[e._v("提升状态相对于双向绑定方法需要写更多的“模板”代码，但是有一个好处，它可以更方便的找到和隔离 bugs。由于任何 state(状态) 都 “存活” 在若干的组件中，而且可以分别对其独立修改，所以发生错误的可能大大减少。另外，你可以实现任何定制的逻辑来拒绝或者转换用户输入。")]),e._v(" "),n("p",[e._v("如果某个东西可以从 props(属性) 或者 state(状态) 得到，那么它可能不应该在 state(状态) 中。例如，我们只保存最后编辑的 "),n("code",[e._v("temperature")]),e._v(" 和它的 "),n("code",[e._v("scale")]),e._v("，而不是保存 "),n("code",[e._v("celsiusValue")]),e._v(" 和"),n("code",[e._v("fahrenheitValue")]),e._v(" 。另一个输入框的值总是在 "),n("code",[e._v("render()")]),e._v(" 方法中计算得来的。这使我们对其进行清除和四舍五入到其他字段同时不会丢失用户输入的精度。")]),e._v(" "),n("p",[e._v("当你看到 UI 中的错误，你可以使用 "),n("a",{attrs:{href:"https://github.com/facebook/react-devtools",target:"_blank",rel:"noopener noreferrer"}},[e._v("React 开发者工具"),n("OutboundLink")],1),e._v("来检查 props ，并向上遍历树，直到找到负责更新状态的组件。这使你可以跟踪到 bug 的源头：")]),e._v(" "),n("h1",{attrs:{id:"组合和继承对比-composition-vs-inheritance"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组合和继承对比-composition-vs-inheritance"}},[e._v("#")]),e._v(" 组合和继承对比（Composition vs Inheritance）")]),e._v(" "),n("p",[e._v("React 拥有一个强大的组合模型，我们建议使用组合而不是继承以实现代码的重用。")]),e._v(" "),n("p",[e._v("在本节中，我们将考虑几个问题，即 React 新手经常会使用继承，并展示我们如何通过组合来解决它们。")]),e._v(" "),n("h2",{attrs:{id:"包含"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#包含"}},[e._v("#")]),e._v(" 包含")]),e._v(" "),n("p",[e._v("一些组件在设计前无法获知自己要使用什么子组件，尤其在 "),n("code",[e._v("Sidebar")]),e._v(" 和 "),n("code",[e._v("Dialog")]),e._v(" 等通用 “容器” 中比较常见。")]),e._v(" "),n("p",[e._v("我们建议这种组件使用特别的 "),n("code",[e._v("children")]),e._v(" prop 来直接传递 子元素到他们的输出中：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function FancyBorder(props) {\n  return (\n    <div className={'FancyBorder FancyBorder-' + props.color}>\n      {props.children}\n    </div>\n  );\n}\n\n")])])]),n("p",[e._v("这允许其他组件通过嵌套 JSX 传递任意子组件给他们：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('function WelcomeDialog() {\n  return (\n    <FancyBorder color="blue">\n      <h1 className="Dialog-title">\n        Welcome\n      </h1>\n      <p className="Dialog-message">\n        Thank you for visiting our spacecraft!\n      </p>\n    </FancyBorder>\n  );\n}\n\n')])])]),n("p",[n("a",{attrs:{href:"http://codepen.io/gaearon/pen/ozqNOV?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("在 "),n("code",[e._v("JSX 标签中的任何内容被传递到 `FancyBorder` 组件中，作为一个 `children`prop(属性)。由于 `FancyBorder` 渲染 `{props.children}` 到一个")]),e._v(" 中，传递的元素会呈现在最终的输出中。")]),e._v(" "),n("p",[e._v("然而这并不常见，有时候，在一个组件中你可能需要多个 “占位符” 。在这种情况下，你可以使用自定义的 prop(属性)，而不是使用 "),n("code",[e._v("children")]),e._v(" ：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('function SplitPane(props) {\n  return (\n    <div className="SplitPane">\n      <div className="SplitPane-left">\n        {props.left}\n      </div>\n      <div className="SplitPane-right">\n        {props.right}\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <SplitPane\n      left={\n        <Contacts />\n      }\n      right={\n        <Chat />\n      } />\n  );\n}\n\n')])])]),n("p",[n("a",{attrs:{href:"http://codepen.io/gaearon/pen/gwZOJp?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("如 "),n("code",[e._v("和")]),e._v(" 等 React 元素本质上也是对象，所以可以将其像其他数据一样作为 props(属性) 传递使用。")]),e._v(" "),n("h2",{attrs:{id:"特例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#特例"}},[e._v("#")]),e._v(" 特例")]),e._v(" "),n("p",[e._v("有时候，我们考虑组件作为其它组件的“特殊情况”。例如，我们可能说一个 "),n("code",[e._v("WelcomeDialog")]),e._v(" 是"),n("code",[e._v("Dialog")]),e._v(" 的一个特殊用例。")]),e._v(" "),n("p",[e._v("在React中，也可以使用组合来实现，一个偏“特殊”的组件渲染出一个偏“通用”的组件，通过 props(属性) 配置它：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('function Dialog(props) {\n  return (\n    <FancyBorder color="blue">\n      <h1 className="Dialog-title">\n        {props.title}\n      </h1>\n      <p className="Dialog-message">\n        {props.message}\n      </p>\n    </FancyBorder>\n  );\n}\n\nfunction WelcomeDialog() {\n  return (\n    <Dialog\n      title="Welcome"\n      message="Thank you for visiting our spacecraft!" />\n  );\n}\n\n')])])]),n("p",[n("a",{attrs:{href:"http://codepen.io/gaearon/pen/kkEaOZ?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("对于用类定义的组件组合也同样适用：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('function Dialog(props) {\n  return (\n    <FancyBorder color="blue">\n      <h1 className="Dialog-title">\n        {props.title}\n      </h1>\n      <p className="Dialog-message">\n        {props.message}\n      </p>\n      {props.children}\n    </FancyBorder>\n  );\n}\n\nclass SignUpDialog extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSignUp = this.handleSignUp.bind(this);\n    this.state = {login: \'\'};\n  }\n\n  render() {\n    return (\n      <Dialog title="Mars Exploration Program"\n              message="How should we refer to you?">\n        <input value={this.state.login}\n               onChange={this.handleChange} />\n        <button onClick={this.handleSignUp}>\n          Sign Me Up!\n        </button>\n      </Dialog>\n    );\n  }\n\n  handleChange(e) {\n    this.setState({login: e.target.value});\n  }\n\n  handleSignUp() {\n    alert(`Welcome aboard, ${this.state.login}!`);\n  }\n}\n\n')])])]),n("p",[n("a",{attrs:{href:"http://codepen.io/gaearon/pen/gwZbYa?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 中尝试"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("h2",{attrs:{id:"如何看待继"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何看待继"}},[e._v("#")]),e._v(" 如何看待继？")]),e._v(" "),n("p",[e._v("在 Facebook ，我们在千万的组件中使用 React，我们还没有发现任何用例，值得我们建议你用继承层次结构来创建组件。")]),e._v(" "),n("p",[e._v("使用 props(属性) 和 组合已经足够灵活来明确、安全的定制一个组件的外观和行为。切记，组件可以接受任意的 props(属性) ，包括原始值、React 元素，或者函数。")]),e._v(" "),n("p",[e._v("如果要在组件之间重用非 U I功能，我们建议将其提取到单独的 JavaScript 模块中。组件可以导入它并使用该函数，对象或类，而不扩展它。")])])}),[],!1,null,null,null);t.default=r.exports}}]);