(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{421:function(e,n,t){"use strict";t.r(n);var s=t(15),r=Object(s.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"eslint-配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#eslint-配置"}},[e._v("#")]),e._v(" ESLint 配置")]),e._v(" "),t("p",[e._v("ESlint 被设计为完全可配置的，这意味着你可以关闭每一个规则而只运行基本语法验证，或混合和匹配 ESLint 默认绑定的规则和你的自定义规则，以让 ESLint 更适合你的项目。有两种主要的方式来配置 ESLint：")]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("Configuration Comments")]),e._v(" - 使用 JavaScript 注释把配置信息直接嵌入到一个代码源文件中。")]),e._v(" "),t("li",[t("strong",[e._v("Configuration Files")]),e._v(" - 使用 JavaScript、JSON 或者 YAML 文件为整个目录和它的子目录指定配置信息。可以配置一个独立的  "),t("a",{attrs:{href:"https://cn.eslint.org/docs/user-guide/configuring#configuration-file-formats",target:"_blank",rel:"noopener noreferrer"}},[e._v(".eslintrc.*"),t("OutboundLink")],1),e._v("  文件，或者直接在  "),t("a",{attrs:{href:"https://docs.npmjs.com/files/package.json",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("package.json")]),t("OutboundLink")],1),e._v("  文件里的  "),t("code",[e._v("eslintConfig")]),e._v("  字段指定配置，ESLint 会查找和自动读取它们，再者，你可以在"),t("a",{attrs:{href:"https://cn.eslint.org/docs/user-guide/command-line-interface",target:"_blank",rel:"noopener noreferrer"}},[e._v("命令行"),t("OutboundLink")],1),e._v("运行时指定一个任意的配置文件。")])]),e._v(" "),t("p",[e._v("有很多信息可以配置：")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Environments")]),e._v(" - 指定脚本的运行环境。每种环境都会有一组特定的预定义全局变量。")]),e._v(" "),t("li",[t("strong",[e._v("Globals")]),e._v(" - 脚本在执行期间访问的额外的全局变量。")]),e._v(" "),t("li",[t("strong",[e._v("Rules")]),e._v(" - 启用的规则及其各自的错误级别。")])]),e._v(" "),t("p",[e._v("所有这些选项让你可以细粒度地控制 ESLint 如何对待你的代码。")]),e._v(" "),t("h2",{attrs:{id:"指定解析器选项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指定解析器选项"}},[e._v("#")]),e._v(" 指定解析器选项")]),e._v(" "),t("p",[e._v("ESLint 允许你指定你想要支持的 JavaScript 语言选项。默认情况下，ESLint 支持 ECMAScript 5 语法。你可以覆盖该设置，以启用对 ECMAScript 其它版本和 JSX 的支持。")]),e._v(" "),t("p",[e._v("请注意，对 JSX 语法的支持不用于对 React 的支持。React 使用了一些特定的 ESLint 无法识别的 JSX 语法。如果你正在使用 React 并且想要 React 语义支持，我们推荐你使用  "),t("a",{attrs:{href:"https://github.com/yannickcr/eslint-plugin-react",target:"_blank",rel:"noopener noreferrer"}},[e._v("eslint-plugin-react"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("p",[e._v("同样的，支持 ES6 语法并不意味着同时支持新的 ES6 全局变量或类型（比如  "),t("code",[e._v("Set")]),e._v("  等新类型）。使用  "),t("code",[e._v('{ "parserOptions": { "ecmaVersion": 6 } }')]),e._v("  来启用 ES6 语法支持；要额外支持新的 ES6 全局变量，使用  "),t("code",[e._v('{ "env":{ "es6": true } }')]),e._v("(这个设置会同时自动启用 ES6 语法支持)。")]),e._v(" "),t("p",[e._v("解析器选项可以在  "),t("code",[e._v(".eslintrc.*")]),e._v("  文件使用  "),t("code",[e._v("parserOptions")]),e._v("  属性设置。可用的选项有：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ecmaVersion")]),e._v(" - 默认设置为 5， 你可以使用 3、5、6、7 或 8 来指定你想要使用的 ECMAScript 版本。你也可以用使用年份命名的版本号指定为 2015（同 6），2016（同 7），或 2017（同 8）")]),e._v(" "),t("li",[t("code",[e._v("sourceType")]),e._v(" - 设置为  "),t("code",[e._v('"script"')]),e._v(" (默认) 或  "),t("code",[e._v('"module"')]),e._v("（如果你的代码是 ECMAScript 模块)。")]),e._v(" "),t("li",[t("code",[e._v("ecmaFeatures")]),e._v(" - 这是个对象，表示你想使用的额外的语言特性:"),t("code",[e._v("globalReturn")]),e._v(" - 允许在全局作用域下使用  "),t("code",[e._v("return")]),e._v("  语句"),t("code",[e._v("impliedStrict")]),e._v(" - 启用全局  "),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode",target:"_blank",rel:"noopener noreferrer"}},[e._v("strict mode"),t("OutboundLink")],1),e._v(" (如果  "),t("code",[e._v("ecmaVersion")]),e._v("  是 5 或更高)"),t("code",[e._v("jsx")]),e._v(" - 启用  "),t("a",{attrs:{href:"http://facebook.github.io/jsx/",target:"_blank",rel:"noopener noreferrer"}},[e._v("JSX"),t("OutboundLink")],1),t("code",[e._v("experimentalObjectRestSpread")]),e._v(" - 启用实验性的  "),t("a",{attrs:{href:"https://github.com/sebmarkbage/ecmascript-rest-spread",target:"_blank",rel:"noopener noreferrer"}},[e._v("object rest/spread properties"),t("OutboundLink")],1),e._v("  支持。(**重要：**这是一个实验性的功能,在未来可能会有明显改变。 建议你写的规则  "),t("strong",[e._v("不要")]),e._v("  依赖该功能，除非当它发生改变时你愿意承担维护成本。)")])]),e._v(" "),t("p",[t("code",[e._v(".eslintrc.json")]),e._v("  文件示例：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "parserOptions": {\n        "ecmaVersion": 6,\n        "sourceType": "module",\n        "ecmaFeatures": {\n            "jsx": true\n        }\n    },\n    "rules": {\n        "semi": 2\n    }\n}\n\n')])])]),t("p",[e._v("设置解析器选项能帮助 ESLint 确定什么是解析错误，所有语言选项默认都是  "),t("code",[e._v("false")]),e._v("。")]),e._v(" "),t("h2",{attrs:{id:"指定解析器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指定解析器"}},[e._v("#")]),e._v(" 指定解析器")]),e._v(" "),t("p",[e._v("ESLint 默认使用"),t("a",{attrs:{href:"https://github.com/eslint/espree",target:"_blank",rel:"noopener noreferrer"}},[e._v("Espree"),t("OutboundLink")],1),e._v("作为其解析器，你可以在配置文件中指定一个不同的解析器，只要该解析器符合下列要求：")]),e._v(" "),t("ol",[t("li",[e._v("它必须是本地安装的一个 npm 模块。")]),e._v(" "),t("li",[e._v("它必须有兼容 Esprima 的接口（它必须输出一个  "),t("code",[e._v("parse()")]),e._v("  方法）")]),e._v(" "),t("li",[e._v("它必须产出兼容 Esprima 的 AST 和 token 对象。")])]),e._v(" "),t("p",[e._v("注意，即使满足这些兼容性要求，也不能保证一个外部解析器可以与 ESLint 正常配合工作，ESLint 也不会修复与其它解析器不兼容的相关 bug。")]),e._v(" "),t("p",[e._v("为了表明使用该 npm 模块作为你的解析器，你需要在你的  "),t("code",[e._v(".eslintrc")]),e._v("  文件里指定  "),t("code",[e._v("parser")]),e._v("  选项。例如，下面的配置指定了 Esprima 作为解析器：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "parser": "esprima",\n    "rules": {\n        "semi": "error"\n    }\n}\n\n')])])]),t("p",[e._v("以下解析器与 ESLint 兼容：")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://npmjs.com/package/esprima",target:"_blank",rel:"noopener noreferrer"}},[e._v("Esprima"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://npmjs.com/package/babel-eslint",target:"_blank",rel:"noopener noreferrer"}},[e._v("Babel-ESLint"),t("OutboundLink")],1),e._v(" - 一个对"),t("a",{attrs:{href:"http://babeljs.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Babel"),t("OutboundLink")],1),e._v("解析器的包装，使其能够与 ESLint 兼容。")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://npmjs.com/package/typescript-eslint-parser",target:"_blank",rel:"noopener noreferrer"}},[e._v("typescript-eslint-parser(实验)"),t("OutboundLink")],1),e._v(" - 一个把 TypeScript 转换为 ESTree 兼容格式的解析器，这样它就可以在 ESLint 中使用了。这样做的目的是通过 ESLint 来解析 TypeScript 文件（尽管不一定必须通过所有的 ESLint 规则）。")])]),e._v(" "),t("p",[e._v("注意，在使用自定义解析器时，为了让 ESLint 在处理非 ECMAScript 5 特性时正常工作，配置属性  "),t("code",[e._v("parserOptions")]),e._v("  仍然是必须的。解析器会被传入  "),t("code",[e._v("parserOptions")]),e._v("，但是不一定会使用它们来决定功能特性的开关。")]),e._v(" "),t("h2",{attrs:{id:"指定环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指定环境"}},[e._v("#")]),e._v(" 指定环境")]),e._v(" "),t("p",[e._v("一个“环境”定义了一组预定义的全局变量。可用的环境包括：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("browser")]),e._v(" - 浏览器环境中的全局变量。")]),e._v(" "),t("li",[t("code",[e._v("node")]),e._v(" - Node.js 全局变量和 Node.js 作用域。")]),e._v(" "),t("li",[t("code",[e._v("commonjs")]),e._v(" - CommonJS 全局变量和 CommonJS 作用域 (一般用于 Browserify/WebPack 打包的只在浏览器中运行的代码)。")]),e._v(" "),t("li",[t("code",[e._v("shared-node-browser")]),e._v(" - Node 和 Browser 通用全局变量。")]),e._v(" "),t("li",[t("code",[e._v("es6")]),e._v(" - 启用除了 modules 以外的所有 ECMAScript 6 特性（该选项会自动设置  "),t("code",[e._v("ecmaVersion")]),e._v("  解析器选项为 6）。")]),e._v(" "),t("li",[t("code",[e._v("worker")]),e._v(" - Web Workers 全局变量。")]),e._v(" "),t("li",[t("code",[e._v("amd")]),e._v(" - 将  "),t("code",[e._v("require()")]),e._v("  和  "),t("code",[e._v("define()")]),e._v("  定义为像  "),t("a",{attrs:{href:"https://github.com/amdjs/amdjs-api/wiki/AMD",target:"_blank",rel:"noopener noreferrer"}},[e._v("amd"),t("OutboundLink")],1),e._v("  一样的全局变量。")]),e._v(" "),t("li",[t("code",[e._v("mocha")]),e._v(" - 添加所有的 Mocha 测试全局变量。")]),e._v(" "),t("li",[t("code",[e._v("jasmine")]),e._v(" - 添加所有的 Jasmine 版本 1.3 和 2.0 的测试全局变量。")]),e._v(" "),t("li",[t("code",[e._v("jest")]),e._v(" - Jest 全局变量。")]),e._v(" "),t("li",[t("code",[e._v("phantomjs")]),e._v(" - PhantomJS 全局变量。")]),e._v(" "),t("li",[t("code",[e._v("protractor")]),e._v(" - Protractor 全局变量。")]),e._v(" "),t("li",[t("code",[e._v("qunit")]),e._v(" - QUnit 全局变量。")]),e._v(" "),t("li",[t("code",[e._v("jquery")]),e._v(" - jQuery 全局变量。")]),e._v(" "),t("li",[t("code",[e._v("prototypejs")]),e._v(" - Prototype.js 全局变量。")]),e._v(" "),t("li",[t("code",[e._v("shelljs")]),e._v(" - ShellJS 全局变量。")]),e._v(" "),t("li",[t("code",[e._v("meteor")]),e._v(" - Meteor 全局变量。")]),e._v(" "),t("li",[t("code",[e._v("mongo")]),e._v(" - MongoDB 全局变量。")]),e._v(" "),t("li",[t("code",[e._v("applescript")]),e._v(" - AppleScript 全局变量。")]),e._v(" "),t("li",[t("code",[e._v("nashorn")]),e._v(" - Java 8 Nashorn 全局变量。")]),e._v(" "),t("li",[t("code",[e._v("serviceworker")]),e._v(" - Service Worker 全局变量。")]),e._v(" "),t("li",[t("code",[e._v("atomtest")]),e._v(" - Atom 测试全局变量。")]),e._v(" "),t("li",[t("code",[e._v("embertest")]),e._v(" - Ember 测试全局变量。")]),e._v(" "),t("li",[t("code",[e._v("webextensions")]),e._v(" - WebExtensions 全局变量。")]),e._v(" "),t("li",[t("code",[e._v("greasemonkey")]),e._v(" - GreaseMonkey 全局变量。")])]),e._v(" "),t("p",[e._v("这些环境并不是互斥的，所以你可以同时定义多个。")]),e._v(" "),t("p",[e._v("可以在源文件里、在配置文件中或使用  "),t("a",{attrs:{href:"https://cn.eslint.org/docs/user-guide/command-line-interface",target:"_blank",rel:"noopener noreferrer"}},[e._v("命令行"),t("OutboundLink")],1),e._v("  的  "),t("code",[e._v("--env")]),e._v("  选项来指定环境。")]),e._v(" "),t("p",[e._v("要在你的 JavaScript 文件中使用注释来指定环境，格式如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/* eslint-env node, mocha */\n\n")])])]),t("p",[e._v("该设置启用了 Node.js 和 Mocha 环境。")]),e._v(" "),t("p",[e._v("要在配置文件里指定环境，使用  "),t("code",[e._v("env")]),e._v("  关键字指定你想启用的环境，并设置它们为  "),t("code",[e._v("true")]),e._v("。例如，以下示例启用了 browser 和 Node.js 的环境：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "env": {\n        "browser": true,\n        "node": true\n    }\n}\n\n')])])]),t("p",[e._v("或在  "),t("code",[e._v("package.json")]),e._v("  文件中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "name": "mypackage",\n    "version": "0.0.1",\n    "eslintConfig": {\n        "env": {\n            "browser": true,\n            "node": true\n        }\n    }\n}\n\n')])])]),t("p",[e._v("在 YAML 文件中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("---\n  env:\n    browser: true\n    node: true\n\n")])])]),t("p",[e._v("如果你想在一个特定的插件中使用一种环境，确保提前在  "),t("code",[e._v("plugins")]),e._v("  数组里指定了插件名，然后在 env 配置中不带前缀的插件名后跟一个  "),t("code",[e._v("/")]),e._v(" ，紧随着环境名。例如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "plugins": ["example"],\n    "env": {\n        "example/custom": true\n    }\n}\n\n')])])]),t("p",[e._v("或在  "),t("code",[e._v("package.json")]),e._v("  文件中")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "name": "mypackage",\n    "version": "0.0.1",\n    "eslintConfig": {\n        "plugins": ["example"],\n        "env": {\n            "example/custom": true\n        }\n    }\n}\n\n')])])]),t("p",[e._v("在 YAML 文件中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("---\n  plugins:\n    - example\n  env:\n    example/custom: true\n\n")])])]),t("h2",{attrs:{id:"指定全局变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指定全局变量"}},[e._v("#")]),e._v(" 指定全局变量")]),e._v(" "),t("p",[e._v("当访问当前源文件内未定义的变量时，"),t("a",{attrs:{href:"https://cn.eslint.org/docs/rules/no-undef",target:"_blank",rel:"noopener noreferrer"}},[e._v("no-undef"),t("OutboundLink")],1),e._v("  规则将发出警告。如果你想在一个源文件里使用全局变量，推荐你在 ESLint 中定义这些全局变量，这样 ESLint 就不会发出警告了。你可以使用注释或在配置文件中定义全局变量。")]),e._v(" "),t("p",[e._v("要在你的 JavaScript 文件中，用注释指定全局变量，格式如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/* global var1, var2 */\n\n")])])]),t("p",[e._v("这里定义了两个全局变量："),t("code",[e._v("var1")]),e._v("  和  "),t("code",[e._v("var2")]),e._v("。如果你想指定这些变量不应被重写（只读），你可以将它们设置为  "),t("code",[e._v("false")]),e._v("：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/* global var1:false, var2:false */\n\n")])])]),t("p",[e._v("在配置文件里配置全局变量时，使用  "),t("code",[e._v("globals")]),e._v("  指出你要使用的全局变量。将变量设置为  "),t("code",[e._v("true")]),e._v("  将允许变量被重写，或  "),t("code",[e._v("false")]),e._v("  将不允许被重写。比如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "globals": {\n        "var1": true,\n        "var2": false\n    }\n}\n\n')])])]),t("p",[e._v("在 YAML 中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("---\n  globals:\n    var1: true\n    var2: false\n\n")])])]),t("p",[e._v("在这些例子中  "),t("code",[e._v("var1")]),e._v("  允许被重写，"),t("code",[e._v("var2")]),e._v("  不允许被重写。")]),e._v(" "),t("p",[t("strong",[e._v("注意：")]),e._v("  要启用"),t("a",{attrs:{href:"https://cn.eslint.org/docs/rules/no-global-assign",target:"_blank",rel:"noopener noreferrer"}},[e._v("no-global-assign"),t("OutboundLink")],1),e._v("规则来禁止对只读的全局变量进行修改。")]),e._v(" "),t("h2",{attrs:{id:"配置插件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置插件"}},[e._v("#")]),e._v(" 配置插件")]),e._v(" "),t("p",[e._v("ESLint 支持使用第三方插件。在使用插件之前，你必须使用 npm 安装它。")]),e._v(" "),t("p",[e._v("在配置文件里配置插件时，可以使用  "),t("code",[e._v("plugins")]),e._v("  关键字来存放插件名字的列表。插件名称可以省略  "),t("code",[e._v("eslint-plugin-")]),e._v("  前缀。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "plugins": [\n        "plugin1",\n        "eslint-plugin-plugin2"\n    ]\n}\n\n')])])]),t("p",[e._v("在 YAML 中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("---\n  plugins:\n    - plugin1\n    - eslint-plugin-plugin2\n\n")])])]),t("p",[e._v("**注意：**全局安装的 ESLint 只能使用全局安装的插件。本地安装的 ESLint 不仅可以使用本地安装的插件，也可以使用全局安装的插件。")]),e._v(" "),t("h2",{attrs:{id:"配置规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置规则"}},[e._v("#")]),e._v(" 配置规则")]),e._v(" "),t("p",[e._v("ESLint 附带有大量的规则。你可以使用注释或配置文件修改你项目中要使用的规则。要改变一个规则设置，你必须将规则 ID 设置为下列值之一：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v('"off"')]),e._v("  或  "),t("code",[e._v("0")]),e._v(" - 关闭规则")]),e._v(" "),t("li",[t("code",[e._v('"warn"')]),e._v("  或  "),t("code",[e._v("1")]),e._v(" - 开启规则，使用警告级别的错误："),t("code",[e._v("warn")]),e._v(" (不会导致程序退出)")]),e._v(" "),t("li",[t("code",[e._v('"error"')]),e._v("  或  "),t("code",[e._v("2")]),e._v(" - 开启规则，使用错误级别的错误："),t("code",[e._v("error")]),e._v(" (当被触发的时候，程序会退出)")])]),e._v(" "),t("p",[e._v("为了在文件注释里配置规则，使用以下格式的注释：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/* eslint eqeqeq: "off", curly: "error" */\n\n')])])]),t("p",[e._v("在这个例子里，"),t("a",{attrs:{href:"https://cn.eslint.org/docs/rules/eqeqeq",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("eqeqeq")]),t("OutboundLink")],1),e._v("  规则被关闭，"),t("a",{attrs:{href:"https://cn.eslint.org/docs/rules/curly",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("curly")]),t("OutboundLink")],1),e._v("  规则被打开，定义为错误级别。你也可以使用对应的数字定义规则严重程度：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/* eslint eqeqeq: 0, curly: 2 */\n\n")])])]),t("p",[e._v("这个例子和上个例子是一样的，只不过它是用的数字而不是字符串。"),t("code",[e._v("eqeqeq")]),e._v("  规则是关闭的，"),t("code",[e._v("curly")]),e._v("  规则被设置为错误级别。")]),e._v(" "),t("p",[e._v("如果一个规则有额外的选项，你可以使用数组字面量指定它们，比如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/* eslint quotes: ["error", "double"], curly: 2 */\n\n')])])]),t("p",[e._v("这条注释为规则  "),t("a",{attrs:{href:"https://cn.eslint.org/docs/rules/quotes",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("quotes")]),t("OutboundLink")],1),e._v("  指定了 “double”选项。数组的第一项总是规则的严重程度（数字或字符串）。")]),e._v(" "),t("p",[e._v("还可以使用  "),t("code",[e._v("rules")]),e._v("  连同错误级别和任何你想使用的选项，在配置文件中进行规则配置。例如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "rules": {\n        "eqeqeq": "off",\n        "curly": "error",\n        "quotes": ["error", "double"]\n    }\n}\n\n')])])]),t("p",[e._v("在 YAML 中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("---\nrules:\n  eqeqeq: off\n  curly: error\n  quotes:\n    - error\n    - double\n\n")])])]),t("p",[e._v("配置定义在插件中的一个规则的时候，你必须使用  "),t("code",[e._v("插件名/规则ID")]),e._v("  的形式。比如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "plugins": [\n        "plugin1"\n    ],\n    "rules": {\n        "eqeqeq": "off",\n        "curly": "error",\n        "quotes": ["error", "double"],\n        "plugin1/rule1": "error"\n    }\n}\n\n')])])]),t("p",[e._v("在 YAML 中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('---\nplugins:\n  - plugin1\nrules:\n  eqeqeq: 0\n  curly: error\n  quotes:\n    - error\n    - "double"\n  plugin1/rule1: error\n\n')])])]),t("p",[e._v("在这些配置文件中，规则  "),t("code",[e._v("plugin1/rule1")]),e._v("  表示来自插件  "),t("code",[e._v("plugin1")]),e._v("  的  "),t("code",[e._v("rule1")]),e._v("  规则。你也可以使用这种格式的注释配置，比如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/* eslint "plugin1/rule1": "error" */\n\n')])])]),t("p",[e._v("**注意：**当指定来自插件的规则时，确保删除  "),t("code",[e._v("eslint-plugin-")]),e._v("  前缀。ESLint 在内部只使用没有前缀的名称去定位规则。")]),e._v(" "),t("h2",{attrs:{id:"使用行注释禁用规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用行注释禁用规则"}},[e._v("#")]),e._v(" 使用行注释禁用规则")]),e._v(" "),t("p",[e._v("可以在你的文件中使用以下格式的块注释来临时禁止规则出现警告：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/* eslint-disable */\n\nalert('foo');\n\n/* eslint-enable */\n\n")])])]),t("p",[e._v("你也可以对指定的规则启用或禁用警告:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/* eslint-disable no-alert, no-console */\n\nalert('foo');\nconsole.log('bar');\n\n/* eslint-enable no-alert, no-console */\n\n\n")])])]),t("p",[e._v("如果在整个文件范围内禁止规则出现警告，将  "),t("code",[e._v("/* eslint-disable */")]),e._v("  块注释放在文件顶部：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/* eslint-disable */\n\nalert('foo');\n\n")])])]),t("p",[e._v("你也可以对整个文件启用或禁用警告:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/* eslint-disable no-alert */\n\n// Disables no-alert for the rest of the file\nalert('foo');\n\n")])])]),t("p",[e._v("可以在你的文件中使用以下格式的行注释在某一特定的行上禁用所有规则：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("alert('foo'); // eslint-disable-line\n\n// eslint-disable-next-line\nalert('foo');\n\n")])])]),t("p",[e._v("在某一特定的行上禁用某个指定的规则：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("alert('foo'); // eslint-disable-line no-alert\n\n// eslint-disable-next-line no-alert\nalert('foo');\n\n")])])]),t("p",[e._v("在某个特定的行上禁用多个规则：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("alert('foo'); // eslint-disable-line no-alert, quotes, semi\n\n// eslint-disable-next-line no-alert, quotes, semi\nalert('foo');\n\n")])])]),t("p",[e._v("上面的所有方法同样适用于插件规则。例如，禁止  "),t("code",[e._v("eslint-plugin-example")]),e._v("  的  "),t("code",[e._v("rule-name")]),e._v("  规则，把插件名（"),t("code",[e._v("example")]),e._v("）和规则名（"),t("code",[e._v("rule-name")]),e._v("）结合为  "),t("code",[e._v("example/rule-name")]),e._v("：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("foo(); // eslint-disable-line example/rule-name\n\n")])])]),t("p",[e._v("**注意：**为文件的某部分禁用警告的注释，告诉 ESLint 不要对禁用的代码报告规则的冲突。ESLint 仍解析整个文件，然而，禁用的代码仍需要是有效的 JavaScript 语法。")]),e._v(" "),t("h2",{attrs:{id:"添加分享配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#添加分享配置"}},[e._v("#")]),e._v(" 添加分享配置")]),e._v(" "),t("p",[e._v("ESLint 支持在配置文件添加共享设置。你可以添加  "),t("code",[e._v("settings")]),e._v("  对象到配置文件，它将提供给每一个将被执行的规则。如果你想添加的自定义规则而且使它们可以访问到相同的信息，这将会很有用，并且很容易配置。")]),e._v(" "),t("p",[e._v("在 JSON 中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "settings": {\n        "sharedData": "Hello"\n    }\n}\n\n')])])]),t("p",[e._v("在 YAML 中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('---\n  settings:\n    sharedData: "Hello"\n\n')])])]),t("h2",{attrs:{id:"使用配置文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用配置文件"}},[e._v("#")]),e._v(" 使用配置文件")]),e._v(" "),t("p",[e._v("有两种方式可以使用配置文件。第一种是将文件保存到你喜欢的地方，然后将它的位置使用  "),t("code",[e._v("-c")]),e._v("  选项传递命令行，比如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("eslint -c myconfig.json myfiletotest.js\n\n")])])]),t("p",[e._v("第二种方式是通过  "),t("code",[e._v(".eslintrc.*")]),e._v("  和  "),t("code",[e._v("package.json")]),e._v("。ESLint 将自动在要检测的文件目录里寻找它们，紧接着是父级目录，一直到文件系统的根目录。当你想对一个项目的不同部分的使用不同配置，或当你希望别人能够直接使用 ESLint，而无需记住要在配置文件中传递什么，这种方式就很有用。")]),e._v(" "),t("p",[e._v("每种情况，配置文件都会覆盖默认设置。")]),e._v(" "),t("h2",{attrs:{id:"配置文件文件格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置文件文件格式"}},[e._v("#")]),e._v(" 配置文件文件格式")]),e._v(" "),t("p",[e._v("ESLint 支持几种格式的配置文件：")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("JavaScript")]),e._v(" - 使用  "),t("code",[e._v(".eslintrc.js")]),e._v("  然后输出一个配置对象。")]),e._v(" "),t("li",[t("strong",[e._v("YAML")]),e._v(" - 使用  "),t("code",[e._v(".eslintrc.yaml")]),e._v("  或  "),t("code",[e._v(".eslintrc.yml")]),e._v("  去定义配置的结构。")]),e._v(" "),t("li",[t("strong",[e._v("JSON")]),e._v(" - 使用  "),t("code",[e._v(".eslintrc.json")]),e._v("  去定义配置的结构，ESLint 的 JSON 文件允许 JavaScript 风格的注释。")]),e._v(" "),t("li",[t("strong",[e._v("(不推荐)")]),e._v(" - 使用  "),t("code",[e._v(".eslintrc")]),e._v("，可以使 JSON 也可以是 YAML。")]),e._v(" "),t("li",[t("strong",[e._v("package.json")]),e._v(" - 在  "),t("code",[e._v("package.json")]),e._v("  里创建一个  "),t("code",[e._v("eslintConfig")]),e._v("属性，在那里定义你的配置。")])]),e._v(" "),t("p",[e._v("如果同一个目录下有多个配置文件，ESLint 只会使用一个。优先级顺序如下：")]),e._v(" "),t("ol",[t("li",[t("code",[e._v(".eslintrc.js")])]),e._v(" "),t("li",[t("code",[e._v(".eslintrc.yaml")])]),e._v(" "),t("li",[t("code",[e._v(".eslintrc.yml")])]),e._v(" "),t("li",[t("code",[e._v(".eslintrc.json")])]),e._v(" "),t("li",[t("code",[e._v(".eslintrc")])]),e._v(" "),t("li",[t("code",[e._v("package.json")])])]),e._v(" "),t("h2",{attrs:{id:"配置的层级和继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置的层级和继承"}},[e._v("#")]),e._v(" 配置的层级和继承")]),e._v(" "),t("p",[e._v("当使用  "),t("code",[e._v(".eslintrc.*")]),e._v("  和  "),t("code",[e._v("package.json")]),e._v("文件的配置时，你可以利用层叠配置。例如，假如你有以下结构：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("your-project\n├── .eslintrc\n├── lib\n│ └── source.js\n└─┬ tests\n  ├── .eslintrc\n  └── test.js\n\n")])])]),t("p",[e._v("层叠配置使用离要检测的文件最近的  "),t("code",[e._v(".eslintrc")]),e._v("文件作为最高优先级，然后才是父目录里的配置文件，等等。当你在这个项目中允许 ESLint 时，"),t("code",[e._v("lib/")]),e._v("下面的所有文件将使用项目根目录里的  "),t("code",[e._v(".eslintrc")]),e._v("  文件作为它的配置文件。当 ESLint 遍历到  "),t("code",[e._v("test/")]),e._v("  目录，"),t("code",[e._v("your-project/.eslintrc")]),e._v("  之外，它还会用到  "),t("code",[e._v("your-project/tests/.eslintrc")]),e._v("。所以  "),t("code",[e._v("your-project/tests/test.js")]),e._v("  是基于它的目录层次结构中的两个"),t("code",[e._v(".eslintrc")]),e._v("  文件的组合，并且离的最近的一个优先。通过这种方式，你可以有项目级 ESLint 设置，也有覆盖特定目录的 ESLint 设置。")]),e._v(" "),t("p",[e._v("同样的，如果在根目录的  "),t("code",[e._v("package.json")]),e._v("  文件中有一个  "),t("code",[e._v("eslintConfig")]),e._v("  字段，其中的配置将使用于所有子目录，但是当  "),t("code",[e._v("tests")]),e._v("  目录下的  "),t("code",[e._v(".eslintrc")]),e._v("  文件中的规则与之发生冲突时，就会覆盖它。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("your-project\n├── package.json\n├── lib\n│ └── source.js\n└─┬ tests\n  ├── .eslintrc\n  └── test.js\n\n")])])]),t("p",[e._v("如果同一目录下  "),t("code",[e._v(".eslintrc")]),e._v("  和  "),t("code",[e._v("package.json")]),e._v("  同时存在，"),t("code",[e._v(".eslintrc")]),e._v("  优先级高会被使用，"),t("code",[e._v("package.json")]),e._v("  文件将不会被使用。")]),e._v(" "),t("p",[e._v("**注意：**如果在你的主目录下有一个自定义的配置文件 ("),t("code",[e._v("~/.eslintrc")]),e._v(") ，如果没有其它配置文件时它才会被使用。因为个人配置将适用于用户目录下的所有目录和文件，包括第三方的代码，当 ESLint 运行时可能会导致问题。")]),e._v(" "),t("p",[e._v("默认情况下，ESLint 会在所有父级目录里寻找配置文件，一直到根目录。如果你想要你所有项目都遵循一个特定的约定时，这将会很有用，但有时候会导致意想不到的结果。为了将 ESLint 限制到一个特定的项目，在你项目根目录下的  "),t("code",[e._v("package.json")]),e._v("  文件或者  "),t("code",[e._v(".eslintrc.*")]),e._v("  文件里的  "),t("code",[e._v("eslintConfig")]),e._v("  字段下设置  "),t("code",[e._v('"root": true')]),e._v("。ESLint 一旦发现配置文件中有  "),t("code",[e._v('"root": true')]),e._v("，它就会停止在父级目录中寻找。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "root": true\n}\n\n')])])]),t("p",[e._v("在 YAML 中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("---\n  root: true\n\n")])])]),t("p",[e._v("例如，"),t("code",[e._v("projectA")]),e._v("  的  "),t("code",[e._v("lib/")]),e._v("  目录下的  "),t("code",[e._v(".eslintrc")]),e._v("  文件中设置了  "),t("code",[e._v('"root": true')]),e._v("。这种情况下，当检测  "),t("code",[e._v("main.js")]),e._v("  时，"),t("code",[e._v("lib/")]),e._v("  下的配置将会被使用，"),t("code",[e._v("projectA/")]),e._v("  下的  "),t("code",[e._v(".eslintrc")]),e._v("  将不会被使用。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('home\n└── user\n    ├── .eslintrc <- Always skipped if other configs present\n    └── projectA\n        ├── .eslintrc  <- Not used\n        └── lib\n            ├── .eslintrc  <- { "root": true }\n            └── main.js\n\n')])])]),t("p",[e._v("完整的配置层次结构，从最高优先级最低的优先级，如下:")]),e._v(" "),t("ol",[t("li",[e._v("行内配置\n"),t("ol",[t("li",[t("code",[e._v("/*eslint-disable*/")]),e._v("  和  "),t("code",[e._v("/*eslint-enable*/")])]),e._v(" "),t("li",[t("code",[e._v("/*global*/")])]),e._v(" "),t("li",[t("code",[e._v("/*eslint*/")])]),e._v(" "),t("li",[t("code",[e._v("/*eslint-env*/")])])])]),e._v(" "),t("li",[e._v("命令行选项：\n"),t("ol",[t("li",[t("code",[e._v("--global")])]),e._v(" "),t("li",[t("code",[e._v("--rule")])]),e._v(" "),t("li",[t("code",[e._v("--env")])]),e._v(" "),t("li",[t("code",[e._v("-c")]),e._v("、"),t("code",[e._v("--config")])])])]),e._v(" "),t("li",[e._v("项目级配置：\n"),t("ol",[t("li",[e._v("与要检测的文件在同一目录下的  "),t("code",[e._v(".eslintrc.*")]),e._v("  或  "),t("code",[e._v("package.json")]),e._v("  文件")]),e._v(" "),t("li",[e._v("继续在父级目录寻找  "),t("code",[e._v(".eslintrc")]),e._v("  或  "),t("code",[e._v("package.json")]),e._v("文件，直到根目录（包括根目录）或直到发现一个有"),t("code",[e._v('"root": true')]),e._v("的配置。")]),e._v(" "),t("li",[e._v("如果不是（1）到（3）中的任何一种情况，退回到  "),t("code",[e._v("~/.eslintrc")]),e._v("  中自定义的默认配置。")])])])]),e._v(" "),t("h2",{attrs:{id:"扩展配置文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#扩展配置文件"}},[e._v("#")]),e._v(" 扩展配置文件")]),e._v(" "),t("p",[e._v("一个配置文件可以被基础配置中的已启用的规则继承。")]),e._v(" "),t("p",[t("code",[e._v("extends")]),e._v("  属性值可以是：")]),e._v(" "),t("ul",[t("li",[e._v("在配置中指定的一个字符串")]),e._v(" "),t("li",[e._v("字符串数组：每个配置继承它前面的配置")])]),e._v(" "),t("p",[e._v("ESLint 递归地进行扩展配置，所以一个基础的配置也可以有一个  "),t("code",[e._v("extends")]),e._v("  属性。")]),e._v(" "),t("p",[t("code",[e._v("rules")]),e._v("  属性可以做下面的任何事情以扩展（或覆盖）规则：")]),e._v(" "),t("ul",[t("li",[e._v("启用额外的规则")]),e._v(" "),t("li",[e._v("改变继承的规则级别而不改变它的选项：\n"),t("ul",[t("li",[e._v("基础配置："),t("code",[e._v('"eqeqeq": ["error", "allow-null"]')])]),e._v(" "),t("li",[e._v("派生的配置："),t("code",[e._v('"eqeqeq": "warn"')])]),e._v(" "),t("li",[e._v("最后生成的配置："),t("code",[e._v('"eqeqeq": ["warn", "allow-null"]')])])])]),e._v(" "),t("li",[e._v("覆盖基础配置中的规则的选项\n"),t("ul",[t("li",[e._v("基础配置："),t("code",[e._v('"quotes": ["error", "single", "avoid-escape"]')])]),e._v(" "),t("li",[e._v("派生的配置："),t("code",[e._v('"quotes": ["error", "single"]')])]),e._v(" "),t("li",[e._v("最后生成的配置："),t("code",[e._v('"quotes": ["error", "single"]')])])])])]),e._v(" "),t("h3",{attrs:{id:"使用-eslint-recommended"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-eslint-recommended"}},[e._v("#")]),e._v(" 使用  eslint:recommended")]),e._v(" "),t("p",[e._v("值为  "),t("code",[e._v('"eslint:recommended"')]),e._v("  的  "),t("code",[e._v("extends")]),e._v("  属性启用一系列核心规则，这些规则报告一些常见问题，在  "),t("a",{attrs:{href:"https://cn.eslint.org/docs/rules/",target:"_blank",rel:"noopener noreferrer"}},[e._v("规则页面"),t("OutboundLink")],1),e._v("  中被标记为   。这个推荐的子集只能在 ESLint 主要版本进行更新。")]),e._v(" "),t("p",[e._v("如果你的配置集成了推荐的规则：在你升级到 ESLint 新的主版本之后，在你使用"),t("a",{attrs:{href:"https://cn.eslint.org/docs/user-guide/command-line-interface#fix",target:"_blank",rel:"noopener noreferrer"}},[e._v("命令行"),t("OutboundLink")],1),e._v("的  "),t("code",[e._v("--fix")]),e._v("  选项之前，检查一下报告的问题，这样你就知道一个新的可修复的推荐的规则将更改代码。")]),e._v(" "),t("p",[t("code",[e._v("eslint --init")]),e._v("  命令可以创建一个配置，这样你就可以继承推荐的规则。")]),e._v(" "),t("p",[e._v("JavaScript 格式的一个配置文件的例子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('module.exports = {\n    "extends": "eslint:recommended",\n    "rules": {\n        // enable additional rules\n        "indent": ["error", 4],\n        "linebreak-style": ["error", "unix"],\n        "quotes": ["error", "double"],\n        "semi": ["error", "always"],\n\n        // override default options for rules from base configurations\n        "comma-dangle": ["error", "always"],\n        "no-cond-assign": ["error", "always"],\n\n        // disable rules from base configurations\n        "no-console": "off",\n    }\n}\n')])])]),t("h3",{attrs:{id:"使用可共享的配置包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用可共享的配置包"}},[e._v("#")]),e._v(" 使用可共享的配置包")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://cn.eslint.org/docs/developer-guide/shareable-configs",target:"_blank",rel:"noopener noreferrer"}},[e._v("可共享的配置"),t("OutboundLink")],1),e._v("  是一个 npm 包，它输出一个配置对象。要确保这个包安装在 ESLint 能请求到的目录下。")]),e._v(" "),t("p",[t("code",[e._v("extends")]),e._v("  属性值可以省略包名的前缀  "),t("code",[e._v("eslint-config-")]),e._v("。")]),e._v(" "),t("p",[t("code",[e._v("eslint --init")]),e._v("  命令可以创建一个配置，这样你就可以扩展一个流行的风格指南（比如，"),t("code",[e._v("eslint-config-standard")]),e._v("）。")]),e._v(" "),t("p",[e._v("YAML 格式的一个配置文件的例子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("extends: standard\nrules:\n  comma-dangle:\n    - error\n    - always\n  no-empty: warn\n\n")])])]),t("h3",{attrs:{id:"使用插件中的配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用插件中的配置"}},[e._v("#")]),e._v(" 使用插件中的配置")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://cn.eslint.org/docs/developer-guide/working-with-plugins",target:"_blank",rel:"noopener noreferrer"}},[e._v("插件"),t("OutboundLink")],1),e._v("  是一个 npm 包，通常输出规则。一些插件也可以输出一个或多个命名的  "),t("a",{attrs:{href:"https://cn.eslint.org/docs/developer-guide/working-with-plugins#configs-in-plugins",target:"_blank",rel:"noopener noreferrer"}},[e._v("配置"),t("OutboundLink")],1),e._v("。要确保这个包安装在 ESLint 能请求到的目录下。")]),e._v(" "),t("p",[t("code",[e._v("plugins")]),e._v(" "),t("a",{attrs:{href:"https://cn.eslint.org/docs/user-guide/configuring#configuring-plugins",target:"_blank",rel:"noopener noreferrer"}},[e._v("属性值"),t("OutboundLink")],1),e._v("  可以省略包名的前缀  "),t("code",[e._v("eslint-plugin-")]),e._v("。")]),e._v(" "),t("p",[t("code",[e._v("extends")]),e._v("  属性值可以由以下组成：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("plugin:")])]),e._v(" "),t("li",[e._v("包名 (省略了前缀，比如，"),t("code",[e._v("react")]),e._v(")")]),e._v(" "),t("li",[t("code",[e._v("/")])]),e._v(" "),t("li",[e._v("配置名称 (比如  "),t("code",[e._v("recommended")]),e._v(")")])]),e._v(" "),t("p",[e._v("JSON 格式的一个配置文件的例子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "plugins": [\n        "react"\n    ],\n    "extends": [\n        "eslint:recommended",\n        "plugin:react/recommended"\n    ],\n    "rules": {\n       "no-set-state": "off"\n    }\n}\n\n')])])]),t("h3",{attrs:{id:"使用一个配置文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用一个配置文件"}},[e._v("#")]),e._v(" 使用一个配置文件")]),e._v(" "),t("p",[t("code",[e._v("extends")]),e._v("  属性值可以是基本"),t("a",{attrs:{href:"https://cn.eslint.org/docs/user-guide/configuring#using-configuration-files",target:"_blank",rel:"noopener noreferrer"}},[e._v("配置文件"),t("OutboundLink")],1),e._v("的绝对路径或相对路径。")]),e._v(" "),t("p",[e._v("ESLint 解析基本配置文件的相对路径相对你你使用的配置文件，"),t("strong",[e._v("除非")]),e._v("那个文件在你的主目录或非 ESLint 安装目录的父级目录。在这些情况下，ESLint 解析基本配合文件的相对路径相对于被检测的  "),t("strong",[e._v("项目")]),e._v("目录（尤其是当前工作目录）。")]),e._v(" "),t("p",[e._v("JSON 格式的一个配置文件的例子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "extends": [\n        "./node_modules/coding-standard/eslintDefaults.js",\n        "./node_modules/coding-standard/.eslintrc-es6",\n        "./node_modules/coding-standard/.eslintrc-jsx"\n    ],\n    "rules": {\n        "eqeqeq": "warn"\n    }\n}\n\n')])])]),t("h3",{attrs:{id:"使用-eslint-all"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-eslint-all"}},[e._v("#")]),e._v(" 使用  eslint:all")]),e._v(" "),t("p",[t("code",[e._v("extends")]),e._v("  属性值可以是  "),t("code",[e._v('"eslint:all"')]),e._v("，启用当前安装的 ESLint 中所有的核心规则。这些规则可以在 ESLint 的任何版本进行更改。")]),e._v(" "),t("p",[e._v("**重要：**这些配置  "),t("strong",[e._v("不推荐在产品中使用")]),e._v("，因为它随着 ESLint 版本进行更改。使用的话，请自己承担风险。")]),e._v(" "),t("p",[e._v("如果你配置 ESLint 升级时自动地启用新规则，当源码没有任何改变时，ESLint 可以报告新问题，因此任何 ESLint 的新的小版本好像有破坏性的更改。")]),e._v(" "),t("p",[e._v("当你决定在一个项目上使用的规则和选项，尤其是如果你很少覆盖选项或禁用规则，你可能启用所有核心规则作为一种快捷方式使用。规则的默认选项并不是 ESLint 推荐的（例如，"),t("code",[e._v("quotes")]),e._v("  规则的默认选项并不意味着双引号要比单引号好）。")]),e._v(" "),t("p",[e._v("如果你的配置扩展了所有的核心规则：在你升级到一个新的大或小的 ESLint 版本，在你使用"),t("a",{attrs:{href:"https://cn.eslint.org/docs/user-guide/command-line-interface#fix",target:"_blank",rel:"noopener noreferrer"}},[e._v("命令行"),t("OutboundLink")],1),e._v("的  "),t("code",[e._v("--fix")]),e._v("  选项之前，检查一下报告的问题，这样你就知道一个新的可修复的规则将更改代码。")]),e._v(" "),t("p",[e._v("JavaScript 格式的一个配置文件的例子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('module.exports = {\n    "extends": "eslint:all",\n    "rules": {\n        // override default options\n        "comma-dangle": ["error", "always"],\n        "indent": ["error", 2],\n        "no-cond-assign": ["error", "always"],\n\n        // disable now, but enable in the future\n        "one-var": "off", // ["error", "never"]\n\n        // disable\n        "init-declarations": "off",\n        "no-console": "off",\n        "no-inline-comments": "off",\n    }\n}\n\n')])])]),t("h2",{attrs:{id:"基于-glob-模式的配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基于-glob-模式的配置"}},[e._v("#")]),e._v(" 基于 glob 模式的配置")]),e._v(" "),t("p",[e._v("有时，你可能需要更精细的配置，比如，如果同一个目录下的文件需要有不同的配置。因此，你可以在配置中使用  "),t("code",[e._v("overrides")]),e._v("  键，它只适用于匹配特定的 glob 模式的文件，使用你在命令行上传递的格式 (e.g., "),t("code",[e._v("app/**/*.test.js")]),e._v(")。")]),e._v(" "),t("h3",{attrs:{id:"怎么工作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#怎么工作"}},[e._v("#")]),e._v(" 怎么工作")]),e._v(" "),t("ul",[t("li",[e._v("Glob 模式覆盖只能在配置文件 ("),t("code",[e._v(".eslintrc.*")]),e._v("  或  "),t("code",[e._v("package.json")]),e._v(") 中进行配置。")]),e._v(" "),t("li",[e._v("模式应用于相对于配置文件的目录的文件路径。 比如，如果你的配置文件的路径为  "),t("code",[e._v("/Users/john/workspace/any-project/.eslintrc.js")]),e._v("  而你要检测的路径为  "),t("code",[e._v("/Users/john/workspace/any-project/lib/util.js")]),e._v("，那么你在  "),t("code",[e._v(".eslintrc.js")]),e._v("  中提供的模式是相对于 "),t("code",[e._v("lib/util.js")]),e._v(" 来执行的.")]),e._v(" "),t("li",[e._v("在相同的配置文件中，Glob 模式覆盖比其他常规配置具有更高的优先级。 同一个配置中的多个覆盖将按顺序被应用。也就是说，配置文件中的最后一个覆盖会有最高优先级。")]),e._v(" "),t("li",[e._v("一个 glob 特定的配置几乎与 ESLint 的其他配置相同。覆盖块可以包含常规配置中的除了  "),t("code",[e._v("extends")]),e._v("、"),t("code",[e._v("overrides")]),e._v("  和  "),t("code",[e._v("root")]),e._v("  之外的其他任何有效配置选项，")]),e._v(" "),t("li",[e._v("可以在单个覆盖块中提供多个 glob 模式。一个文件必须匹配至少一个配置中提供的模式。")]),e._v(" "),t("li",[e._v("覆盖块也可以指定从匹配中排除的模式。如果一个文件匹配了任何一个排除模式，该配置将不再被应用。")])]),e._v(" "),t("h3",{attrs:{id:"相对-glob-模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相对-glob-模式"}},[e._v("#")]),e._v(" 相对 glob 模式")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("project-root\n├── app\n│   ├── lib\n│   │   ├── foo.js\n│   │   ├── fooSpec.js\n│   ├── components\n│   │   ├── bar.js\n│   │   ├── barSpec.js\n│   ├── .eslintrc.json\n├── server\n│   ├── server.js\n│   ├── serverSpec.js\n├── .eslintrc.json\n\n")])])]),t("p",[t("code",[e._v("app/.eslintrc.json")]),e._v("  文件中的配置定义了 glob 模式  "),t("code",[e._v("**/*Spec.js")]),e._v("。该模式是相对  "),t("code",[e._v("app/.eslintrc.json")]),e._v("  的基本目录的。因此，该模式将匹配  "),t("code",[e._v("app/lib/fooSpec.js")]),e._v("  和  "),t("code",[e._v("app/components/barSpec.js")]),e._v("  但  "),t("strong",[e._v("不匹配")]),e._v(" "),t("code",[e._v("server/serverSpec.js")]),e._v("。如果你在项目根目录下的  "),t("code",[e._v(".eslintrc.json")]),e._v("  文件中定义了同样的模式，它将匹配这三个  "),t("code",[e._v("*Spec")]),e._v("  文件。")]),e._v(" "),t("h3",{attrs:{id:"配置示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置示例"}},[e._v("#")]),e._v(" 配置示例")]),e._v(" "),t("p",[e._v("在你的  "),t("code",[e._v(".eslintrc.json")]),e._v("  文件中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "rules": {\n    "quotes": [ 2, "double" ]\n  },\n\n  "overrides": [\n    {\n      "files": [ "bin/*.js", "lib/*.js" ],\n      "excludedFiles": "*.test.js",\n      "rules": {\n        "quotes": [ 2, "single" ]\n      }\n    }\n  ]\n}\n\n')])])]),t("h2",{attrs:{id:"在配置文件中注释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在配置文件中注释"}},[e._v("#")]),e._v(" 在配置文件中注释")]),e._v(" "),t("p",[e._v("JSON 和 YAML 配置文件格式都支持注释 ( "),t("code",[e._v("package.json")]),e._v("  文件不应该包括注释)。你可以在其他类型的文件中使用 JavaScript 风格的注释或使用 YAML 风格的注释，ESLint 会忽略它们。这允许你的配置更加人性化。例如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "env": {\n        "browser": true\n    },\n    "rules": {\n        // Override our default settings just for this directory\n        "eqeqeq": "warn",\n        "strict": "off"\n    }\n}\n\n')])])]),t("h2",{attrs:{id:"指定需要检查的文件扩展名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指定需要检查的文件扩展名"}},[e._v("#")]),e._v(" 指定需要检查的文件扩展名")]),e._v(" "),t("p",[e._v("目前，告诉 ESLint 哪个文件扩展名要检测的唯一方法是使用  "),t("a",{attrs:{href:"https://cn.eslint.org/docs/user-guide/command-line-interface#ext",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("--ext")]),t("OutboundLink")],1),e._v("  命令行选项指定一个逗号分隔的扩展名列表。注意，该标记只在与目录一起使用时有效，如果使用文件名或 glob 模式，它将会被忽略。")]),e._v(" "),t("h2",{attrs:{id:"忽略文件和目录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#忽略文件和目录"}},[e._v("#")]),e._v(" 忽略文件和目录")]),e._v(" "),t("p",[e._v("你可以通过在项目根目录创建一个  "),t("code",[e._v(".eslintignore")]),e._v("  文件告诉 ESLint 去忽略特定的文件和目录。"),t("code",[e._v(".eslintignore")]),e._v("  文件是一个纯文本文件，其中的每一行都是一个 glob 模式表明哪些路径应该忽略检测。例如，以下将忽略所有的 JavaScript 文件：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("**/*.js\n\n")])])]),t("p",[e._v("当 ESLint 运行时，在确定哪些文件要检测之前，它会在当前工作目录中查找一个  "),t("code",[e._v(".eslintignore")]),e._v("  文件。如果发现了这个文件，当遍历目录时，将会应用这些偏好设置。一次只有一个  "),t("code",[e._v(".eslintignore")]),e._v("  文件会被使用，所以，不是当前工作目录下的  "),t("code",[e._v(".eslintignore")]),e._v("  文件将不会被用到。")]),e._v(" "),t("p",[e._v("Globs 匹配使用  "),t("a",{attrs:{href:"https://github.com/kaelzhang/node-ignore",target:"_blank",rel:"noopener noreferrer"}},[e._v("node-ignore"),t("OutboundLink")],1),e._v("，所以大量可用的特性有：")]),e._v(" "),t("ul",[t("li",[e._v("以  "),t("code",[e._v("#")]),e._v("  开头的行被当作注释，不影响忽略模式。")]),e._v(" "),t("li",[e._v("路径是相对于  "),t("code",[e._v(".eslintignore")]),e._v("  的位置或当前工作目录。这也会影响通过  "),t("code",[e._v("--ignore-pattern")]),e._v("传递的路径。")]),e._v(" "),t("li",[e._v("忽略模式同  "),t("code",[e._v(".gitignore")]),e._v(" "),t("a",{attrs:{href:"http://git-scm.com/docs/gitignore",target:"_blank",rel:"noopener noreferrer"}},[e._v("规范"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("以  "),t("code",[e._v("!")]),e._v("  开头的行是否定模式，它将会重新包含一个之前被忽略的模式。")])]),e._v(" "),t("p",[e._v("除了  "),t("code",[e._v(".eslintignore")]),e._v("  文件中的模式，ESLint 总是忽略  "),t("code",[e._v("/node_modules/*")]),e._v("  和  "),t("code",[e._v("/bower_components/*")]),e._v("  中的文件。")]),e._v(" "),t("p",[e._v("例如：把下面  "),t("code",[e._v(".eslintignore")]),e._v("  文件放到当前工作目录里，将忽略  "),t("code",[e._v("node_modules")]),e._v("，"),t("code",[e._v("bower_components")]),e._v("  以及  "),t("code",[e._v("build/")]),e._v("  目录下除了  "),t("code",[e._v("build/index.js")]),e._v("  的所有文件。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# /node_modules/* and /bower_components/* ignored by default\n\n# Ignore built files except build/index.js\nbuild/*\n!build/index.js\n\n")])])]),t("h3",{attrs:{id:"使用备用文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用备用文件"}},[e._v("#")]),e._v(" 使用备用文件")]),e._v(" "),t("p",[e._v("如果相比于当前工作目录下  "),t("code",[e._v(".eslintignore")]),e._v("  文件，你更想使用一个不同的文件，你可以在命令行使用  "),t("code",[e._v("--ignore-path")]),e._v("  选项指定它。例如，你可以使用  "),t("code",[e._v(".jshintignore")]),e._v("  文件，因为它有相同的格式：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("eslint --ignore-path .jshintignore file.js\n\n")])])]),t("p",[e._v("你也可以使用你的  "),t("code",[e._v(".gitignore")]),e._v("  文件：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("eslint --ignore-path .gitignore file.js\n")])])]),t("p",[e._v("任何文件只要满足标准忽略文件格式都可以用。记住，指定  "),t("code",[e._v("--ignore-path")]),e._v("  意味着任何现有的  "),t("code",[e._v(".eslintignore")]),e._v("  文件将不被使用。请注意，"),t("code",[e._v(".eslintignore")]),e._v("  中的匹配规则比  "),t("code",[e._v(".gitignore")]),e._v("  中的更严格。")]),e._v(" "),t("h3",{attrs:{id:"在-package-json-中使用-eslintconfig"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在-package-json-中使用-eslintconfig"}},[e._v("#")]),e._v(" 在 package.json 中使用 eslintConfig")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "name": "mypackage",\n  "version": "0.0.1",\n  "eslintConfig": {\n      "env": {\n          "browser": true,\n          "node": true\n      }\n  },\n  "eslintIgnore": ["hello.js", "world.js"]\n}\n')])])]),t("h3",{attrs:{id:"忽略文件告警"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#忽略文件告警"}},[e._v("#")]),e._v(" 忽略文件告警")]),e._v(" "),t("p",[e._v("当您将目录传递给 ESLint 时，文件和目录将被忽略。如果将特定文件传递给 ESLint，则会看到一条警告，指示该文件已被跳过。例如，假设你有一个 "),t("code",[e._v(".eslintignore")]),e._v(" 文件，如下所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("foo.js\n\n")])])]),t("p",[e._v("然后，您执行：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("eslint foo.js\n\n")])])]),t("p",[e._v("您将会看到以下告警：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("foo.js\n  0:0  warning  File ignored because of your .eslintignore file. Use --no-ignore to override.\n\n✖ 1 problem (0 errors, 1 warning)\n\n")])])]),t("p",[e._v("发生此消息是因为 ESLint 不确定是否要检查该文件。如消息所示，您可以使用 "),t("code",[e._v("--no-ignore")]),e._v(" 省略使用忽略规则。")])])}),[],!1,null,null,null);n.default=r.exports}}]);